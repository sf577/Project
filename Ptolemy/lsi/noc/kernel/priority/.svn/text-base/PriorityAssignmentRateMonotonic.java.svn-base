package lsi.noc.kernel.priority;

import java.util.ArrayList;



/*
 * @author      Osmar Marchi dos Santos
 * @version 1.0 (York, 06/01/2011)
*/

public class PriorityAssignmentRateMonotonic extends PriorityAssignment {

	public PriorityAssignmentRateMonotonic(PriorityApplicationModel a){
		super(a);
	}

	@Override
	public void performAssignmentTasks() {
		ArrayList<PriorityTask> tasks = application.getTasks();
		int priority = tasks.size();
		int totalTasks = tasks.size();
		int numTasks = tasks.size();

		boolean[] allTasks = new boolean[totalTasks];
		for (int i = 0; i < numTasks; i++) {
			allTasks[i] = false;
		}

		int selectedTask = 0;

		while (numTasks != 0) {
			// Select next task to start with
			for (int i = 0;i < totalTasks; i++) {
				if (! allTasks[i]) {
					selectedTask = i;
					break;
				}
			}
			for (int i = 0;i < totalTasks; i++) {
				if ((selectedTask != i) && (! allTasks[i])) {
					if (tasks.get(i).getPeriod() < tasks.get(selectedTask).getPeriod()) {
						selectedTask = i;
					}
				}
			}
			allTasks[selectedTask] = true;
			tasks.get(selectedTask).setPriority(priority);
			priority--;
			numTasks--;
		}
	}

	@Override
	public void performAssignmentFlows() {
		ArrayList<PriorityTrafficFlow> flows = application.getFlows();
		int priority = flows.size();
		int totalFlows = flows.size();
		int numFlows = flows.size();

		boolean[] allFlows = new boolean[totalFlows];
		for (int i = 0; i < numFlows; i++) {
			allFlows[i] = false;
		}

		int selectedFlow = 0;

		while (numFlows != 0) {
			// Select next task to start with
			for (int i = 0;i < totalFlows; i++) {
				if (! allFlows[i]) {
					selectedFlow = i;
					break;
				}
			}
			for (int i = 0;i < totalFlows; i++) {
				if ((selectedFlow != i) && (! allFlows[i])) {
					if (flows.get(i).getPeriod() < flows.get(selectedFlow).getPeriod()) {
						selectedFlow = i;
					}
				}
			}
			allFlows[selectedFlow] = true;
			flows.get(selectedFlow).setPriority(priority);
			priority--;
			numFlows--;
		}
	}
}
