package lsi.noc.kernel.priority;

import java.text.DecimalFormat;
import java.util.Random;

/*
 * @author Leandro Indrusiak
 * @author Osmar Marchi dos Santos
 * @version 1.0 (York, 06/01/2011)
 *
 */

public class PriorityApplicationModelRandom extends PriorityApplicationModel {

	protected double minTaskTime;
	protected double maxTaskTime;
	protected double minTaskPeriod;
	protected double maxTaskPeriod;

	protected int minFlowSize;
	protected int maxFlowSize;

	protected int randomTasksSeed;
	protected int randomFlowsSeed;

	public PriorityApplicationModelRandom(int tasks, double minTaskTime, double maxTaskTime, double minTaskPeriod, double maxTaskPeriod,
			int tasksSeed,
			int flows, int minFlowSize, int maxFlowSize,
			int flowsSeed) {
		super();

		// TODO: We currently require that the number of tasks is greater than the number of flows
		// More specifically, the source of the flows start from the first task and so on (t1, t2, t3, ... tn)
		// NOTE/TODO: IN THE CURRENT VERSION WE REQUIRE THAT tasks == flows!!
		if (tasks != flows) {
			System.out.println("Currently, we required that: tasks >= flows");
		}
		assert (tasks == flows);

		this.minTaskTime = minTaskTime;
		this.maxTaskTime = maxTaskTime;
		this.minTaskPeriod = minTaskPeriod;
		this.maxTaskPeriod = maxTaskPeriod;

		this.minFlowSize = minFlowSize;
		this.maxFlowSize = maxFlowSize;

		this.randomTasksSeed = tasksSeed;
		this.randomFlowsSeed = flowsSeed;

		// Create tasks
		createRandomTasks(tasks);

		// Create flows
		createRandomFlows(flows);
	}

	protected void createRandomTasks(int n) {
		Random rnd = new Random(randomTasksSeed);
//		Random rndTaskTime = new Random(Math.round(Math.ceil(maxTaskTime)));
//		Random rndTaskPeriod = new Random(Math.round(Math.ceil(maxTaskPeriod)));

		// used to set random priorities to the tasks
		boolean[] allPrio = new boolean[n];
		for (int i = 0; i < n; i++) {
			allPrio[i] = false;
		}

		for (int i = 0; i < n; i++) {
			// comptime between minTaskTime-maxTaskTime seconds
			DecimalFormat twoDForm = new DecimalFormat("#.####");

			double wcet = Math.round(Math.ceil(maxTaskTime)) + 1;
			while (wcet < minTaskTime || wcet > maxTaskTime) {
				wcet = Double.valueOf(twoDForm.format(rnd.nextDouble()));
//				wcet = Double.valueOf(twoDForm.format(rndTaskTime.nextDouble()));
			}

			// Create task with computation time and priority == -1 (priority will be set later, on the assignment algorithm)
			PriorityTask task = new PriorityTask(-1, wcet);
			task.setName("Task" + i);

			// period between minTaskPeriod-maxTaskPeriod seconds, more or equal than comptime
			do {
				double period = maxTaskPeriod + 1;
				while (period > maxTaskPeriod || period < minTaskPeriod) {
					period = Double.valueOf(twoDForm.format(rnd.nextDouble()));
//					period = Double.valueOf(twoDForm.format(rndTaskPeriod.nextDouble()));
				}
				task.setPeriod(period);
			} while (task.getCompTime() > task.getPeriod());

			// No jitter for release
			task.setReleaseJitter(0);
			// Add task to the list
			tasks.add(task);
		}
	}

	/*
	 * Create random flows of communication.
	 * NOTE: Currently, there is a restriction that the sending task communicates with only one task.
	 * NOTE: Moreover, there is another restriction that the period of the flow is the same of the sending task.
	 * NOTE: We model the worst-case response time of the sender task as the release jitter in the priority flow
	 */

	protected void createRandomFlows(int n) {
		Random rnd = new Random(randomFlowsSeed);

		// NOTE: This is used to implement the restriction that a task only communicates with
		// only one task after it finishes its execution
		boolean[] usedSourceTasks = new boolean[tasks.size()];
		for (int i = 0;i < n;i++) {
			usedSourceTasks[i] = false;
		}

		// Creates n traffic flows with randomly generated sources and destinations
		for (int i = 0; i < n; i++) {
			int s, d;
			s = rnd.nextInt(tasks.size());
			while (usedSourceTasks[s] != false) {
				s = rnd.nextInt(tasks.size());
			}
			usedSourceTasks[s] = true;

			// We make sure the flow's destination task is different from the
			// source task
			d = rnd.nextInt(tasks.size());
			while (d == s) {
				d = rnd.nextInt(tasks.size());
			}

			PriorityTask st = tasks.get(s);
			PriorityTask dt = tasks.get(d);

			PriorityTrafficFlow flow = new PriorityTrafficFlow(st, dt);

			// NOTE: Period of the traffic is the same of the source task
			flow.setPeriod(st.getPeriod());

			int payload = maxFlowSize + 1;
			while (payload > maxFlowSize || payload < minFlowSize) {
				payload = rnd.nextInt(maxFlowSize);
			}
			// Set the flow's payload
			flow.setPayload(payload);
			// Add flow to the list
			flows.add(flow);
		}
	}
}