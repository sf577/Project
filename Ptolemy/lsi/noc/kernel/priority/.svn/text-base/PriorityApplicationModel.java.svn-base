package lsi.noc.kernel.priority;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Vector;

/**
 * @author Leandro Soares Indrusiak
 * @author Osmar Marchi dos Santos
 * @version 1.0 (York, 07/01/2011)
 */


public class PriorityApplicationModel extends lsi.noc.kernel.ApplicationModel {

	protected ArrayList<PriorityTask> tasks;
	protected ArrayList<PriorityTrafficFlow> flows;
	protected Hashtable<PriorityTask,PriorityTrafficFlow> flowsPerTask;
	protected Hashtable<PriorityTask,Vector<PriorityTask>> dependenciesPerTask;

	public PriorityApplicationModel(){
		super();

		tasks = new ArrayList<PriorityTask>();
		flows = new ArrayList<PriorityTrafficFlow>();

		flowsPerTask = new Hashtable<PriorityTask,PriorityTrafficFlow>();
		dependenciesPerTask = new Hashtable<PriorityTask,Vector<PriorityTask>>();
	}


    /** Adds a task to the application.
     *
     *  @param t The task to be added.
     */

	public void addTask(PriorityTask t){
		checkGrouping(t);
		tasks.add(t);
		dependenciesPerTask.put(t, new Vector<PriorityTask>());

	}


    /** Adds a communication flow between tasks of the application. If either of the flow's
     *  source or destination are not part of the application, they are added to it before the flow is added.
     *
     *  @param f The flow to be added.
     */
	public void addFlow(PriorityTrafficFlow f){

		PriorityTask s = f.getSourceTask();
		PriorityTask d = f.getDestinationTask();

		if(!tasks.contains(s)){addTask(s);}
		if(!tasks.contains(d)){addTask(d);}

		flows.add(f);

		flowsPerTask.put(s,f);
	}


    /** Checks whether a given task is part of a group. If true, it adds the task to that group.
     *
     *  @param source The task in question.
     */


	protected void checkGrouping(PriorityTask source){


		for(int m=0;m<tasks.size();m++){
			PriorityTask pt = tasks.get(m);
			if(source != pt && source.getName().equals(pt.getName())){

				if(pt.getGroupStatus()==0){
					source.addToGroup(pt);
					source.setGroupStatus(1);
					pt.setGroupStatus(2);
				}
				else if(pt.getGroupStatus()==1){
					pt.addToGroup(source);
					source.setGroupStatus(2);
				}

			}

		}


	}


    /** Returns all active tasks of the application.
     */

	public ArrayList<PriorityTask> getActiveTasks(){

		ArrayList<PriorityTask> activeTasks = new ArrayList<PriorityTask>();

		for(int i=0;i<tasks.size();i++){
				PriorityTask p = tasks.get(i);
				if(p.isActive()){activeTasks.add(p);}
		}

		return activeTasks;
	}



    /** Returns the communication flow generated by a given task.
     *  @param t The task in question.
     */

	public PriorityTrafficFlow getFlow(PriorityTask t){

		return flowsPerTask.get(t);

	}

    /** Returns a vector with all tasks that task <i>t</i> depends on.
     *  @param t The dependent task.
     */

	public Vector<PriorityTask> getDependencies(PriorityTask t){

		return dependenciesPerTask.get(t);
	}


    /** Returns a vector with all tasks that depend on task <i>t</i>.
     *  @param t The task others depend upon.
     */
	public Vector<PriorityTask> getDependentTasks(PriorityTask t){

		Vector<PriorityTask> dependents = new Vector<PriorityTask>();

		for(int i=0;i<tasks.size();i++){

			Vector<PriorityTask> temp = dependenciesPerTask.get(tasks.get(i));
			for(int j=0;j<temp.size();j++){
				if(temp.get(j).equals(t)){dependents.add(tasks.get(i));}
			}

		}

		return dependents;

	}


    /** Returns the communication flow which is a response to a given communication flow (the request).
     *  A response is a flow sent back by a task which depends on the requesting task.
     *
     *  Returns <i>null</i> if there is no response to the request in question.
     *
     *  @param request The communication flow containing the request in question.
     */

	public PriorityTrafficFlow getResponse(PriorityTrafficFlow request){

		PriorityTrafficFlow response=null;

		PriorityTask sender = request.getSourceTask();
		PriorityTask receiver = request.getDestinationTask();

		Vector<PriorityTask> v = getDependentTasks(receiver);

		for(int i=0;i<v.size();i++){

			PriorityTask sres = v.elementAt(i);
			PriorityTrafficFlow temp = flowsPerTask.get(sres);
			if(temp.getDestinationTask().getName().equals(sender.getName())){
				response=temp;
			}
		}
		return response;
	}

    /** Get the list of communications.
     *
	 * @deprecated  Replaced by {@link #getFlows()}
	 */
	@Override
	@Deprecated
	public ArrayList<PriorityTrafficFlow> getCommunications(){
		return flows;
	}


	public ArrayList<PriorityTrafficFlow> getFlows(){
		return flows;
	}

	@Override
	public ArrayList<PriorityTask> getTasks(){
		return tasks;
	}
}