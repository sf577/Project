package lsi.noc.kernel.testbench;


import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Point;
import java.util.ArrayList;
import java.util.Random;
import java.util.StringTokenizer;

import javax.swing.JFrame;


import lsi.noc.kernel.Link;
import lsi.noc.kernel.Mesh2DNoC;
import lsi.noc.kernel.Mesh2DNoCFactory;
import lsi.noc.kernel.Mesh2DRouter;
import lsi.noc.kernel.Mesh2DXYRouting;
import lsi.noc.kernel.Route;
import lsi.noc.kernel.visualisation.RouteViewer;
import lsi.noc.kernel.priority.*;



public class HermesCBTestbench extends Thread{


	ArrayList<PriorityTrafficFlow> flows;
	int x, y;
	double trav, rout;
	
	Mesh2DNoC network;
	Mesh2DXYRouting routing;
	RouteViewer panel;

	public static void main(String[] args) {


		HermesCBTestbench  tb = new HermesCBTestbench();
		tb.start();

	}

	public void run(){

		//NoC dimensions
		x = 14;
		y = 14;



		flows = new ArrayList<PriorityTrafficFlow>();


		JFrame frame = new JFrame("NoCTestbench");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		panel = new RouteViewer();
		frame.getContentPane().add(panel, BorderLayout.CENTER);
		frame.setMinimumSize(new Dimension(1200, 800));
		frame.pack();
		frame.setVisible(true);
		panel.setLabels(true);
		panel.setHopdistance(50);
		panel.setOrigin(new Point(40,40));

		Mesh2DNoCFactory factory = new Mesh2DNoCFactory();
		network = (Mesh2DNoC)factory.createInterconnect(x,y);

		routing = new Mesh2DXYRouting();

		createRandomFlows(50);
		//createApplicationFlows();



		report();
		PriorityMinimizer pm = new PrecedenceBasedPriorityMinimizer(flows);



	}



	public void report(){

		System.out.println("");
		for(int i=0;i<flows.size();i++){

			int dir=(flows.get(i).getDirectInterferenceSet(flows)).size();
			int indir=(flows.get(i).getIndirectInterferenceSet(flows)).size();
			double latency = flows.get(i).getBasicLatency(trav,rout);
			double wclatency = flows.get(i).getDirectInterferenceWorstCaseLatency(trav,rout,flows);
			double iwclatency = flows.get(i).getWorstCaseLatency(trav,rout,flows);

			System.out.println("Flow: "+i+" .... Direct Interference: "+dir+" .... Indirect Interference: "+indir+" .... Basic Latency: "+latency+" .... WC Latency: "+wclatency+" .... Indirect WC Latency: "+iwclatency);
			if(iwclatency>flows.get(i).getPeriod()){
				System.out.println("DEADLINE MISSED!");
				}
			//			System.out.println(latency+","+iwclatency);

		}


	}


	public void createRandomFlows(int n){

		// HERMES values in cycles
		
		//time a flit takes to traverse a link
		trav=1;
		//time to route a header
		rout=3;  
		
		Random rnd = new Random();



		// creates i traffic flows with randomly generated sources and destinations

		for (int i=0;i<n;i++){

			int sx = rnd.nextInt(x);
			int sy = rnd.nextInt(y);

			int dx = rnd.nextInt(x);
			int dy = rnd.nextInt(y);

			while(new Point(sx,sy).equals(new Point(dx,dy))){
				dx = rnd.nextInt(x);
				dy = rnd.nextInt(y);

			}

			Mesh2DRouter source = network.getRouter(sx, sy);
			Mesh2DRouter dest = network.getRouter(dx, dy);

			Route route = routing.route(source, dest, network);
			PriorityTrafficFlow flow = new PriorityTrafficFlow(route,i);
			
			//period of 300 cycles
			//flow.setPeriod(300);
			
			flow.setPeriod(100+rnd.nextInt(900));
			flow.setReleaseJitter(0);
			flow.setPayload(rnd.nextInt(48));

			flows.add(flow);
			panel.addRoute(route);
			panel.repaint();			

		}

	}



	public void createApplicationFlows(){

		//greenpringle values
		
		//time a flit takes to traverse a link
		trav=0.00000001; // 10 nanoseconds = 1 cycle @ 100MHz
		
		//time to route a header
		rout=0.00000001; // 10 nanoseconds = 1 cycle @ 100MHz

		
		
		// creates traffic flows according to the strings below
		// models BasicVehicleApplication v0.6 with 320/240 resolution, 8 bit color and 128 bit flits 
		

		String[] flowdesc = new String[38];

		flowdesc[0]="POSI NAVC 0.005 16384 128 130 0.5 31";
		flowdesc[1]="NAVC OBDB 0.01 32768 256 258 0.5 32";
		flowdesc[2]="OBDB NAVC 0.2 524288 4096 4098 0.5 33";
		flowdesc[3]="OBDB OBMG 0.2 524288 4096 4098 0.5 34";
		flowdesc[4]="NAVC DIRC 0.05 16384 128 130 0.1 24";
		flowdesc[5]="SPES NAVC 0.005 16384 128 130 0.1 25";
		flowdesc[6]="NAVC THRC 0.02 32768 256 258 0.1 26";
		flowdesc[7]="FBU3 VOD1 0.01 153600 1200 1202 0.04 7";
		flowdesc[8]="FBU8 VOD2 0.01 153600 1200 1202 0.04 12";
		flowdesc[9]="VOD1 NAVC 0.02 16384 128 130 0.04 3";
		flowdesc[10]="VOD2 NAVC 0.02 16384 128 130 0.04 4";
		flowdesc[11]="FBU1 BFE1 0.01 153600 1200 1202 0.04 5";
		flowdesc[12]="FBU2 BFE2 0.01 153600 1200 1202 0.04 6";
		flowdesc[13]="FBU3 BFE3 0.01 153600 1200 1202 0.04 1";
		flowdesc[14]="FBU4 BFE4 0.01 153600 1200 1202 0.04 8";
		flowdesc[15]="FBU5 BFE5 0.01 153600 1200 1202 0.04 9";
		flowdesc[16]="FBU6 BFE6 0.01 153600 1200 1202 0.04 10";
		flowdesc[17]="FBU7 BFE7 0.01 153600 1200 1202 0.04 11";
		flowdesc[18]="FBU8 BFE8 0.01 153600 1200 1202 0.04 2";
		flowdesc[19]="BFE1 FDF1 0.02 7680 60 62 0.04 13";
		flowdesc[20]="BFE2 FDF1 0.02 7680 60 62 0.04 14";
		flowdesc[21]="BFE3 FDF1 0.02 7680 60 62 0.04 15";
		flowdesc[22]="BFE4 FDF1 0.02 7680 60 62 0.04 16";
		flowdesc[23]="BFE5 FDF2 0.02 7680 60 62 0.04 17";
		flowdesc[24]="BFE6 FDF2 0.02 7680 60 62 0.04 18";
		flowdesc[25]="BFE7 FDF2 0.02 7680 60 62 0.04 19";
		flowdesc[26]="BFE8 FDF2 0.02 7680 60 62 0.04 20";
		flowdesc[27]="FDF1 STPH 0.01 30720 240 242 0.04 21";
		flowdesc[28]="FDF2 STPH 0.01 30720 240 242 0.04 22";
		flowdesc[29]="STPH OBMG 0.03 131072 1024 1026 0.04 23";
		flowdesc[30]="POSI OBMG 0.005 16384 128 130 0.5 35";
		flowdesc[31]="USOS OBMG 0.005 32768 256 258 0.1 27";
		flowdesc[32]="OBMG OBDB 0.4 131072 1024 1026 1 37";
		flowdesc[33]="TPMS STAC 0.005 65536 512 514 0.5 36";
		flowdesc[34]="VIBS STAC 0.005 16384 128 130 0.1 28";
		flowdesc[35]="STAC TPRC 0.02 32768 256 258 1 38";
		flowdesc[36]="SPES STAC 0.005 32768 256 258 0.1 29";
		flowdesc[37]="STAC THRC 0.01 16384 128 130 0.1 30";



		for (int i=0;i<flowdesc.length;i++){

			StringTokenizer st = new StringTokenizer(flowdesc[i]);
			String so = st.nextToken();
			String de = st.nextToken();
			String comptime = st.nextToken();
			String bits = st.nextToken();
			String flits = st.nextToken();
			String total = st.nextToken();
			int payload = Integer.parseInt(total) -1;
			String speriod = st.nextToken();
			double period = Double.parseDouble(speriod);
			String spriority = st.nextToken();
			int priority = Integer.parseInt(spriority);
	//		String sjitter = st.nextToken();
	//		double jitter = Double.parseDouble(sjitter);
			
			
				
			Point s = mapping(so);
			Point d = mapping(de);

			
			Mesh2DRouter source = network.getRouter(s.x, s.y);
			Mesh2DRouter dest = network.getRouter(d.x, d.y);
			Route route = routing.route(source, dest, network);

			PriorityTrafficFlow flow = new PriorityTrafficFlow(route,priority);			
			flow.setPeriod(period);
			flow.setReleaseJitter(0);//jitter);
			flow.setPayload(payload);

			flows.add(flow);
			panel.addRoute(route);
			panel.repaint();
			

		}

	}

	
	
	public Point mapping(String task){

		if(task.equals("FBU4")) return new Point(0,0);
		else if(task.equals("TPMS")) return new Point(0,0);
		else if(task.equals("USOS")) return new Point(0,0);
		else if(task.equals("BFE4")) return new Point(1,0);
		else if(task.equals("THRC")) return new Point(1,0);
		else if(task.equals("BFE8")) return new Point(2,0);
		else if(task.equals("VOD2")) return new Point(2,0);
		else if(task.equals("FBU8")) return new Point(3,0);
		else if(task.equals("DIRC")) return new Point(3,0);
		else if(task.equals("FBU3")) return new Point(0,1);
		else if(task.equals("OBDB")) return new Point(0,1);
		else if(task.equals("FDF2")) return new Point(1,1);
		else if(task.equals("BFE3")) return new Point(1,1);
		else if(task.equals("STPH")) return new Point(2,1);
		else if(task.equals("BFE7")) return new Point(2,1);
		else if(task.equals("FBU7")) return new Point(3,1);
		else if(task.equals("SPES")) return new Point(3,1);
		else if(task.equals("FBU2")) return new Point(0,2);
		else if(task.equals("OBMG")) return new Point(0,2);
		else if(task.equals("BFE2")) return new Point(1,2);
		else if(task.equals("NAVC")) return new Point(1,2);
		else if(task.equals("BFE6")) return new Point(2,2);
		else if(task.equals("FDF1")) return new Point(2,2);
		else if(task.equals("FBU6")) return new Point(3,2);
		else if(task.equals("STAC")) return new Point(3,2);
		else if(task.equals("FBU1")) return new Point(0,3);
		else if(task.equals("POSI")) return new Point(0,3);
		else if(task.equals("VOD1")) return new Point(1,3);
		else if(task.equals("BFE1")) return new Point(1,3);
		else if(task.equals("BFE5")) return new Point(2,3);
		else if(task.equals("VIBS")) return new Point(2,3);
		else if(task.equals("FBU5")) return new Point(3,3);
		else if(task.equals("TPRC")) return new Point(3,3);
		else return null;
 		
	}
	

	

	
}
