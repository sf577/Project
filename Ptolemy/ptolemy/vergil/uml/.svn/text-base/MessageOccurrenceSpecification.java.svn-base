package ptolemy.vergil.uml;

import java.util.List;

import ptolemy.kernel.util.ChangeListener;
import ptolemy.kernel.util.ChangeRequest;
import ptolemy.kernel.util.IllegalActionException;
import ptolemy.kernel.util.Location;
import ptolemy.kernel.util.NameDuplicationException;
import ptolemy.kernel.util.NamedObj;
import ptolemy.moml.MoMLChangeRequest;

// because there is no multiple inheritance, this class only inherits from
// MessageEnd but to keep consistent with the UML spec, there is an interface
// for OccurrenceSpecifications => which is switched off in this version
/**
 * This class is an implementation of the class MessageOccurrenceSpecification
 * specified in the UML Superstructure specification within the PtolemyII
 * environment.
 * 
 * It defines what happens at the end of Messages. Therefore a
 * MessageOccurrenceSpecification contains an event that describes if this
 * occurrence is the originator (a send event) or the receipient (a receive
 * event).
 * 
 * Besides the lifeline-attribute that is demanded by the UML spec., there is a
 * Location-attribute from PtolemyII. This information enables the correct
 * drawing of the message as well as the calculation of the schedule.
 * 
 * @author Andreas Thuy
 * 
 * last review: 11.09.06
 */
public class MessageOccurrenceSpecification extends MessageEnd implements 
		Comparable,	ChangeListener {

	// time when this MsgOccSpec occurs (position on the lifeline), only
	// the second value of the location-array is important
	public Location locTime = new Location(this, "location");

	/**
	 * Create a dummy MsgOccSpec. The Lifeline attribute will always be null in
	 * this case. This constructor can be used to create a MsgOccSpec without
	 * knowing the Lifeline where the occurrence will occur. This is useful when
	 * a Message is created, and there is only a sendOccurrence yet.
	 * 
	 * NOTE that this is the default constructor for a NamedObj. But it behaves
	 * completely different than any default!!!
	 * 
	 * @param container
	 * @param name
	 * @throws IllegalActionException
	 * @throws NameDuplicationException
	 */
	// TODO create new comment..., in fact, this is the only constructor...
	public MessageOccurrenceSpecification(NamedObj container, String name)
			throws IllegalActionException, NameDuplicationException {
		super(container, name);

		// the type of a MsgOccSpec parameter is String
		// information is only stored to recover the model that was created
		// in an earlier session => Director won't complain about unknown
		// names in the model
		this.setStringMode(true);
		
		container.getContainer().addChangeListener(this);
	}

	// as uncool as in the other classes, will be changed
	// keeps track of renaming lifelines
	public void changeExecuted(ChangeRequest change) {		
			Lifeline myLifeline = null;
			List lifelineList = this.attributeList(Lifeline.class);
			if(lifelineList.size() == 1) {
				if(lifelineList.get(0) != null) {				
					myLifeline = (Lifeline)lifelineList.get(0);									
				}
			}
			if(myLifeline != null) {
				String description = change.getDescription();
//System.out.println("change MessOcSpec: "+description);	
				if(description.contains("rename")) {
					if(description.contains("<property name=\"" + myLifeline
							.getRepresents() + "\">")) {
						int startPos = description.lastIndexOf("name=\"");
						int endPos = description.lastIndexOf("\"");
						String newName = description.substring(startPos + 6, endPos);
						String momlString = "<property name=\"" + 
						myLifeline.getRepresents() + "\"><rename name=\"" + 
						newName + "\"/></property>";
						MoMLChangeRequest req = new MoMLChangeRequest(
								this, this, momlString);
						this.requestChange(req);						
					}
				}
			}		
	}

	// and again, if a change fails, we don't care
	public void changeFailed(ChangeRequest change, Exception exception) {
	}

	/**
	 * Compares two MessageOccurrenceSpecifications. This Comparision yields
	 * "less than" if the time stamp of this is less than the one of msgOccSpec,
	 * "equality" if both MsgOccSpecs occur at the same point on the time line
	 * (a SendEvent will always be less than a ReceiveEvent), "greater than" if
	 * the time stamp of this is greater than the one of msgOccSpec.
	 * 
	 * !Notice! Consistency between this method and equals(Object) ist not
	 * guaranteed!!!!!!!!!!!!
	 * 
	 * @param msgOccSpec - the msgOccSpec that is compared with this
	 * @return - -1 if less than, 0 if equality, 1 if greater than
	 */
	public int compareTo(Object msgOccSpec) {
		if (msgOccSpec instanceof MessageOccurrenceSpecification) {
			MessageOccurrenceSpecification mOS = 
				(MessageOccurrenceSpecification) msgOccSpec;
			// time stamp of this
			double timeStamp = getLocTime()[1];
			// time stamp of MsgOccSpec that is compared with this
			double otherTimeStamp = mOS.getLocTime()[1];
			if (timeStamp < otherTimeStamp) {
				return -1;
			} else if (timeStamp > otherTimeStamp) {
				return 1;
			} else if (timeStamp == otherTimeStamp) {
				if (this.getEvent() instanceof SendEvent) {
					return -1;
				} else {
					return 1;
				}
			}			
			else {
				return Integer.MAX_VALUE;
			}
		}
		// there is no MsgOccSpec... throw an exception
		else {
			return Integer.MAX_VALUE;
		}
	}

	/* (non-Javadoc)
	 * @see ptolemy.vergil.uml.OccurrenceSpecification#getEvent()
	 * 
	 * this is not so cool... an event may not contain specific information
	 * at the moment... that's bad for future versions...
	 */
	public Event getEvent() {
		if (this.getExpression().equals("SendEvent")) {
			return new SendEvent();
		} else if (this.getExpression().equals("ReceiveEvent")) {
			return new ReceiveEvent();
		} else {
			return null;
		}
	}

	/**
	 * @return - the Lifeline where this MsgOccSpec occurs
	 */
	public Lifeline getLifeline() {
		Lifeline myLifeline = null;
		List lifelineList = this.attributeList(Lifeline.class);
		if(lifelineList.size() == 1) {
			if(lifelineList.get(0) != null) {			
				myLifeline = (Lifeline)lifelineList.get(0);
			}
		}
		
		if(myLifeline != null) {
			String lifelineName = myLifeline.getRepresents();
		
			// as only the name of the lifeline is stored in the MsgOccSpec but
			// the real lifeline is needed, we have to get it from the model.
			// Because name duplicates are not allowed, we will get the one
			// we are looking for
			UMLSeqActor root = (UMLSeqActor)getContainer().getContainer();
			Lifeline returnLifeline = null;
			try {
				returnLifeline = (Lifeline) root.getAttribute(lifelineName,
						Lifeline.class);
			} catch (IllegalActionException iAE) {
				iAE.printStackTrace();
			}
			return returnLifeline;
		}
		return null;
	}

	/**
	 * @return - the double[] representation where the MsgOccSpec is placed
	 * - the second value in the array depicts the time on the time line
	 */
	public double[] getLocTime() {
		return this.locTime.getLocation();
	}

	/**
	 * @param messsageEvent - the kind of event - either SendEvent 
	 * or ReceiveEvent
	 */
	// TODO see comment at getEvent()...
	public void setEvent(Event messageEvent) {
		if (messageEvent instanceof MessageEvent) {
			if (messageEvent instanceof SendEvent) {
				this.setExpression("SendEvent");
			} else if (messageEvent instanceof ReceiveEvent) {
				this.setExpression("ReceiveEvent");
			}
		}
		// an exception would normally be thrown here if condition not
		// fulfilled...
		else {
			System.out
					.println("Only SendEvent and ReceiveEvent can be accepted!");
		}
	}

	/**
	 * @param lifeline - the Lifeline that contains this MsgOccSpec
	 */
	public void setLifeline(Lifeline owner) {
		Lifeline myLifeline = null;
		List lifelineList = this.attributeList(Lifeline.class);
		if(lifelineList.size() == 1) {
			if(lifelineList.get(0) != null) {			
				myLifeline = (Lifeline)lifelineList.get(0);
				myLifeline.setRepresents(owner.getRepresents());				
			}
		}
		if(myLifeline == null) {
			try {
				new Lifeline(this, owner.getRepresents());				
			}
			catch(NameDuplicationException nDE) {
				nDE.printStackTrace();
			}
			catch(IllegalActionException iAE) {
				iAE.printStackTrace();
			}
		}
		
	}

	/**
	 * @param locTime - position of the MsgOccSpec, second value depicts the
	 * time on the time line
	 */
	public void setLocTime(Location time) {
		this.locTime = time;
	}
	
	public void setTime(double time) {
		String locString = 
			"<property name=\"location\" class=" + 
			"\"ptolemy.kernel.util.Location\" value=\"{0.0, " + 
			(new Double(time)).toString() + "}\"/>";
		MoMLChangeRequest newLoc = new MoMLChangeRequest(this, this, locString);
		this.requestChange(newLoc);		
	}
}
