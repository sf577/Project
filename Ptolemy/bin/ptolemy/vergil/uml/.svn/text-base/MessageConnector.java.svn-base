package ptolemy.vergil.uml;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;

import diva.canvas.Site;
import diva.canvas.connector.StraightConnector;
import diva.canvas.toolbox.LabelFigure;


/**
 * A MessageConnector is used to describe a method-call in a UML sequence
 * diagram. It is used to draw a connection between two LifelineFigures and
 * to assign a name to the Message (through an attached label). 
 * 
 * @author Andreas Thuy
 * 
 * last review: 11.09.06
 */
public class MessageConnector extends StraightConnector {		

	// can only be set differently in the constructor
	private boolean isDashed = false;
	
	/**
	 * This figure will be displayed on the screen. It represents the
	 * time when a message is sent.
	 */
	private LabelFigure startLabel = null;
	
	// depicts the position on the Lifeline => is assigned to startLabel
	private double startPoint = 0;
	
	/**
	 * Create a MessageConnector from tailSite to headSite in the given layer 
	 * and as a MessageConnector has an Arrowhead at the headSite, the 
	 * Arrowhead will be painted in the color arrowColor.
	 * 
	 * @param tail - Site that represents the starting point
	 * @param head - Site that represents the end point
	 * @param layer - layer of this figure
	 * @param arrowColor - color of the SpecialArrowhead 
	 */
	public MessageConnector(Site tail, Site head, Color arrowColor,
			boolean isDashed) {
        super(tail, head);
        // initialization   		
		this.isDashed = isDashed;
		
        LabelFigure label = new LabelFigure("");
		label.setParent(this);
		this.setLabelFigure(label);
				
		this.startLabel = new LabelFigure("");
		this.startLabel.setFont(new Font(null, Font.PLAIN, 8));
		this.startLabel.setParent(this);
				
		setHeadEnd(new ArrowheadWithRectangle(arrowColor));
		
		if(this.isDashed) {
			activateDashedLine();
		}
	}
	
	/**
	 * Draw this MessageConnector with a dashed line
	 */
	private void activateDashedLine() {
		float f[] = {3};
		BasicStroke stroke = new BasicStroke(1.0f, BasicStroke.CAP_BUTT,  
                BasicStroke.JOIN_MITER, 10.0f, f, 0.0f);
		this.setStroke(stroke);
	}

	// add bounds of the startLabel
	@Override
	public Rectangle2D getBounds() {
		Rectangle2D boundsRect = super.getBounds();
        if (this.startLabel != null) {
            Rectangle2D.union(boundsRect, this.startLabel.getBounds(),
            		boundsRect);
        }
        return boundsRect;
	}		

	public double getStartPoint() {
		return this.startPoint;
	}
	
	public boolean isDashed() {
		return this.isDashed;
	}
	
	/* (non-Javadoc)
	 * @see diva.canvas.VisibleComponent#paint(java.awt.Graphics2D)
	 */
	public void paint(Graphics2D g) {
		super.paint(g);
		
		// additionally paint the label	containing the y-pos of the Connector
		this.startLabel.paint(g);		
	}

	public void setHeadEnd(Color c) {
		setHeadEnd(new SpecialArrowhead(c));
	}

	/**
	 * Sets the label that describes this MessageConnector.
	 * @param label - label that will be displayed on the screen
	 */
	public void setLabel(String label) {		
		getLabelFigure().setString(label);				
	}
	
	public void setStartPoint(double startPoint) {
			this.startPoint = startPoint;
			this.startLabel.setString(String.valueOf(this.startPoint));
			if(this.getTailSite().getX() <= this.getHeadSite().getX()) {
				this.startLabel.translateTo(this.getTailSite().getX() - 10,
						this.getTailSite().getY() - 5);
			}
			else {
				this.startLabel.translateTo(this.getTailSite().getX() + 10,
						this.getTailSite().getY() - 5);
			}
		}
	
	// additionally translate the Arrowhead as well
	public void translate(double x, double y) {		
        if (this.startLabel != null) {
            this.startLabel.translate(x, y);
        }
		super.translate(x, y);
	}
}
