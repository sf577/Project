package ptolemy.vergil.uml;

import java.awt.Color;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Iterator;

import javax.swing.JPopupMenu;

import ptolemy.kernel.util.IllegalActionException;
import ptolemy.kernel.util.Location;
import ptolemy.kernel.util.NameDuplicationException;
import ptolemy.kernel.util.NamedObj;
import ptolemy.moml.MoMLChangeRequest;
import ptolemy.vergil.basic.PopupMouseFilter;
import ptolemy.vergil.toolbox.PtolemyMenuFactory;
import ptolemy.vergil.uml.UMLGraphController.MessageCreator;
import diva.canvas.CanvasComponent;
import diva.canvas.CanvasLayer;
import diva.canvas.Figure;
import diva.canvas.FigureContainer;
import diva.canvas.FigureLayer;
import diva.canvas.Site;
import diva.canvas.TransformContext;
import diva.canvas.connector.AbstractConnectorTarget;
import diva.canvas.connector.AutonomousSite;
import diva.canvas.connector.Connector;
import diva.canvas.connector.ConnectorAdapter;
import diva.canvas.connector.ConnectorEvent;
import diva.canvas.connector.ConnectorInteractor;
import diva.canvas.connector.ConnectorManipulator;
import diva.canvas.connector.ConnectorTarget;
import diva.canvas.event.LayerEvent;
import diva.canvas.event.MouseFilter;
import diva.canvas.interactor.CompositeInteractor;
import diva.canvas.interactor.Interactor;
import diva.canvas.interactor.SelectionInteractor;
import diva.canvas.interactor.SelectionModel;
import diva.canvas.toolbox.LabelFigure;
import diva.graph.BasicEdgeController;
import diva.graph.EdgeInteractor;
import diva.graph.EdgeRenderer;
import diva.graph.GraphController;
import diva.graph.GraphEvent;
import diva.graph.GraphModel;
import diva.graph.GraphViewEvent;
import diva.gui.toolbox.MenuCreator;
import diva.util.Filter;
import diva.util.java2d.ShapeUtilities;


/**
 * Controller for edges that represent Messages in a UML sequence diagram.
 * 
 * @author Leandro Soares Indrusiak, Andreas Thuy
 * 
 * last review: 14.05.07
 */
public class MessageController extends BasicEdgeController {

	/**
	 * This class handles changes that might be applied to a MessageConnector
	 * like attaching the connector to a figure => ConnectorListener.
	 * 
	 * @author Andreas Thuy
	 * 
	 * last review: 06.07.06
	 */
	protected class MessageDropper extends ConnectorAdapter {				
		/**
		 * Only react to drops of the head end of the connector.
		 * 
		 * If the HEAD_END of a connector is dropped on a LifelineFigure,
		 * then a Message is completed and the according MoML description
		 * will be created
		 *  
		 * @see diva.canvas.connector.ConnectorAdapter#connectorDropped(diva.canvas.connector.ConnectorEvent)
		 */
		public void connectorDropped(ConnectorEvent e) {
			Connector connector = e.getConnector();
			// this is the LifelineFigure of the receiver Lifeline
			Figure figure = e.getTarget();

			// A connector that was created from the 
			// UMLGraphController.MessageCreator will not have a UserObject
			// since information has not yet been added to the Ptolemy-model.
			// This will be done here.			
			Object edge = connector.getUserObject();
			
			// this should be a Location contained by a Lifeline
			Object node = (figure == null) ? null : figure.getUserObject();			
			
			UMLGraphModel model = (UMLGraphModel)getController().
					getGraphModel();
			
			switch (e.getEnd()) {	            
				case ConnectorEvent.HEAD_END :	            					
					// The only figure that is supported. drops somewhere else
					// are not supported!
	            	if(figure != null && figure instanceof LifelineFigure) {
	            		LifelineFigure lifelineFigure = (LifelineFigure)figure;
	            		
	            		if(node != null && node instanceof Location) {
	            			if(((Location)node).getContainer() 
	            					instanceof Lifeline) {	            				
	            				// it is assumed that the tail of the connector
	            				// is connected to a Lifeline, too
	            				UMLSeqActor rootModel = (UMLSeqActor)
	            						getController().getGraphModel().
	            						getRoot();
	            				Lifeline senderLifeline = null;
	            				if(connector.getTailSite() != null) {
	            					Site tailSite = connector.getTailSite();
	            					if(tailSite.getFigure() != null) {
	            						if(tailSite.getFigure().
	            								getUserObject() != null) {
	            							senderLifeline = (Lifeline)
	            									((Location)connector.
	            									getTailSite().getFigure().
	            									getUserObject()).
	            									getContainer(); 
	            						}
	            					}
	            				}	            				 	
	            				Lifeline receiverLifeline = (Lifeline)(
	            						(Location)node).getContainer();
	            				if(senderLifeline != null && 
	            						receiverLifeline != null) {
	            					
	            					//point on the senderLifeline
	            					double[] sendingTime = {((LifelineFigure)
	            							connector.getTailSite().
	            							getFigure()).getLifelineX(),
	            							connector.getTailSite().getY()};
	            					
	            							
	            					// point on the receiverLifeline, time 
	            					// (y-pos) same as sender's
	            					double[] receivingTime = {lifelineFigure.
	            							getLifelineX(), 
	            							connector.getTailSite().getY()};	            			
	            					try {
	            						// create all necessary MoML-stuff!
	            						// there is a Message, a sendOccurrence,
	            						// and a receiveOccurrence	            							            						

	            						// TODO this is only true, if no CombinedFragments
	            						// with par InteractionOperator are used
	            						
	            						// depict if a synchronous message
	            						// shall be created, default is asynch.
	            						boolean isSync = false;
	            						int msgSort = MessageSort.ASYNCH_CALL;
	            						
	            						CompositeInteractor compInt = (
	            								CompositeInteractor)(
	            								(UMLGraphController)
	            								getController()).
	            								getLifelineController().
	            								getNodeInteractor();
	            						 Iterator interactors = compInt.
	            						 		interactors();
	            						 while(interactors.hasNext()) {
	            							 Interactor inter = (Interactor)
	            							 		interactors.next();
	            							 if(inter.isEnabled()) {
	            								 if(inter instanceof 
	            										 MessageCreator) {
	            									 if(((MessageCreator)inter).
	            											 isSynchronous()) {
	            										 isSync = true;
	            									 }
	            								 }
	            							 }
	            						 }	            						 	            						
	            						if(isSync) {
	            							msgSort = MessageSort.SYNCH_CALL;
	            						}
	            						// add Message to rootModel
	            						String name=rootModel.uniqueName("m1");
	            						Message msg = new Message(rootModel,
	            								name,
	            								msgSort, null, null);
	            						Iterator mOccSpecs = msg.attributeList(
	            								MessageOccurrenceSpecification.
	            								class).iterator();
	            						while(mOccSpecs.hasNext()) {
	            							NamedObj msgOccSpec = (NamedObj)
	            									mOccSpecs.next();	            								            								
	            							if(msgOccSpec.getName().equals(
	            									"sendEvent")) {	            									
	            								double[] senderLoc = 
	            									senderLifeline.
	            									getLocation().getLocation();
	            								// obtain MoML description
	            								String msgOccSpecString = 
	            									getMsgOccSpecMoML(
	            									senderLifeline.
	            									getRepresents(), 
	            									(new Double(senderLoc[0])).
	            									toString(),
	            									(new Double(senderLoc[1])).
	            									toString(), 
	            									(new Double(sendingTime[1])).
	            									toString());	            									
	            								MoMLChangeRequest adjustMOccSpec = 
	            									new MoMLChangeRequest(
	            									msgOccSpec, msgOccSpec,
	            									msgOccSpecString);
	            								msgOccSpec.requestChange(
	            										adjustMOccSpec);
	            									
	            							}
	            							else if(msgOccSpec.getName().equals(
	            									"receiveEvent")) {
	            								double[] receiverLoc = 
	            									receiverLifeline.
	            									getLocation().getLocation();
	            								// obtain MoML description
	            								String msgOccSpecString = 
	            									getMsgOccSpecMoML(
	            									receiverLifeline.
	            									getRepresents(), 
	            									(new Double(receiverLoc[0])).
	            									toString(),
	            									(new Double(receiverLoc[1])).
	            									toString(),	            									
	            									(new Double(receivingTime[1])).
	            									toString());
	            									
	            								MoMLChangeRequest adjustMsgOccSpec = 
	            									new MoMLChangeRequest(
	            									msgOccSpec,	msgOccSpec,
	            									msgOccSpecString);
	            								msgOccSpec.requestChange(
	            										adjustMsgOccSpec);	            										            									
	        	            						
	            								// create a return Message if
	            								// MessageSort.SYNCH_MESSAGE
	            								if(isSync) {
	        	            						msgSort = MessageSort.RETURN;
	        	            						Message returnMsg = 
	        	            							new Message(rootModel,
	        	            									"return_"+name,
	        	            									msgSort, null, null);
	        	            						Iterator returnMOSs = returnMsg.
	        	            							attributeList(
	        	            							MessageOccurrenceSpecification.
	        	            							class).iterator();
	        	            						while(returnMOSs.hasNext()) {
	        	            							NamedObj returnMOS = 
	        	            								(NamedObj)returnMOSs.next();	        	            								           								
	        	            							if(returnMOS.getName().
	        	            									equals("sendEvent")) {	            									
	        	            								double[] senderLoc = 
	        	            									receiverLifeline.
	        	            									getLocation().getLocation();
	        	            								String returnMsgOccSpecString = 
	        	            									getMsgOccSpecMoML(
	        	            									receiverLifeline.getRepresents(), 
	        	            									(new Double(senderLoc[0])).
	        	            									toString(),
	        	            									(new Double(senderLoc[1])).
	        	            									toString(),	        	            										
	        	            									(new Double(receivingTime[1] + 60)). //hardcoded offset
	        	            									toString());
	        	            									
	        	            								MoMLChangeRequest adjustReturnMOS = 
	        	            									new MoMLChangeRequest(
	        	            									returnMOS, returnMOS,
	        	            									returnMsgOccSpecString);
	        	            								returnMOS.requestChange(adjustReturnMOS);
	        	            								
	        	            								
	        	            								
	        	            							}
	        	            							else if(returnMOS.getName().
	        	            									equals("receiveEvent")) {
	        	            								double[] returnReceiverLoc = 
	        	            									senderLifeline.
	        	            									getLocation().getLocation();
	        	            								String returnMsgOccSpecString = 
	        	            									getMsgOccSpecMoML(
	        	            									senderLifeline.getRepresents(),	        	            										
	        	            									(new Double(returnReceiverLoc[0])).
	        	            									toString(),
	        	            									(new Double(returnReceiverLoc[1])).
	        	            									toString(), 
	        	            									(new Double(sendingTime[1] + 60)). //hardcoded ofset
	        	            									toString());
	        	            									
        	            									MoMLChangeRequest adjustReturnMOS = 
        	            										new MoMLChangeRequest(
	        	            									returnMOS, returnMOS,
	        	            									returnMsgOccSpecString);
	        	            								returnMOS.requestChange(
	        	            									adjustReturnMOS);
	        	            							}	        	            								
	        	            						}
	        	            					}
	            							}	            							
	            						}	            							            							            						    				            			            							            						        								            	
	            						
		            					getController().getSelectionModel().
		            					removeSelection(connector);	            		       			            		        		
		            					CanvasLayer l = connector.getLayer();        	            		
		            					((FigureLayer)l).remove(connector);
		            					l.repaint();

		            					model.dispatchGraphEvent(new GraphEvent(
	                                            this, GraphEvent.STRUCTURE_CHANGED,
	                                            rootModel));	            						
	            					}
	            					catch(IllegalActionException iAE) {
	            						iAE.printStackTrace();
	            					}
	            					catch(NameDuplicationException nDE) {
	            						nDE.printStackTrace();
	            					}	        	            			        	            		
	            				}
	            			}
	            			else {
	            				System.out.println("Only Lifelines are supported...!");
	            			}
	            		}
	            		else {
	            			System.out.println("Only Lifelines are supported...!");
	            		}
	            	}
	            	else {
	            		System.out.println("Only Lifelines are supported...!");
	            		// remove connector from the screen
	            		getController().getSelectionModel().
    					removeSelection(connector);	            		       			            		        		
    					CanvasLayer l = connector.getLayer();        	            		
    					((FigureLayer)l).remove(connector);
    					l.repaint();
	            		
	            	}	            	            
	            break;
	            case ConnectorEvent.TAIL_END :
	                model.getMessageModel().setTail(edge, node);
	                break;
	            default :
	                throw new IllegalStateException(
	                        "Cannot handle both ends of an edge being dragged.");
			}
		}
		
		// correct snapping is handled in ConnectorInteractor.snapToSite
		// this method is overwritten, when the ConnectorInteractor is created
		// to fit my needs
		@Override
		public void connectorUnsnapped(ConnectorEvent e) {
			Connector con = e.getConnector();
			if(con != null) {
				if(e.getEnd() == ConnectorEvent.HEAD_END) {
					// the following is a little bit dangergous as a proper 
					// setup of the connector is expected (tailSite and headSite)
					con.setHeadSite(new AutonomousSite(
							getController().getGraphPane().getForegroundLayer(),
							con.getHeadSite().getX(),
							con.getTailSite().getY()));
				}
			}
		}

		private String getMsgOccSpecMoML(String lifelineName, String lifelineX,
				String lifelineY, String time) {
			StringBuffer mommele = new StringBuffer();
			mommele.append("<group>\n");
			mommele.append("<property name=\"" + // lifeline
					lifelineName + "\" class=" + 
					"\"ptolemy.vergil.uml.Lifeline\">\n");	            										            									            										            									
			// TODO is the location contained by the lifeline necessary???
			mommele.append("<property name=\"" + "location" + // location of lifeline
					"\" class=\"ptolemy.kernel.util.Location\"" + " value=\"{" + 
					lifelineX + ", " + lifelineY + "}\"/>\n");
			mommele.append("</property>\n"); // close Lifeline-property
			mommele.append("<property name=\"" + "location" + // 'time point' on the lifeline 
					"\" class=\"ptolemy.kernel.util.Location\"" + " value=\"{" + 
					"0.0, " + time + "}\"/>\n");
			mommele.append("</group>\n");
			
			return mommele.toString();
		}
	} // end of MessageDropper-class
	
	/**
	 * This class is responsible for the visual representation of a message in
	 * a UML sequence diagram.
	 * 
	 * @author Andreas Thuy
	 */
	public class MessageRenderer implements EdgeRenderer {
		
		public MessageRenderer() {
			super();			
		}

		/* (non-Javadoc)
		 * @see diva.graph.EdgeRenderer#render(java.lang.Object, diva.canvas.Site, diva.canvas.Site)
		 */
		public Connector render(Object edge, Site tailSite, Site headSite) {
			MessageConnector straightMessage = null;			
	        // TODO why is this a Message and not a Location???
			if(edge instanceof Message) {
	        	Message msg = (Message)edge;
			
	        	if(msg.getMsgSort() == MessageSort.SYNCH_CALL) {
	        		straightMessage = new MessageConnector(tailSite, headSite,	        				
	        				Color.RED, false);	        		
	        	}
	        	else if(msg.getMsgSort() == MessageSort.ASYNCH_CALL) {
	        		straightMessage = new MessageConnector(tailSite, headSite,	        				
	        				Color.BLACK, false);	        			        		
	        	}
	        	else if(msg.getMsgSort() == MessageSort.RETURN) {
	        		straightMessage = new MessageConnector(tailSite, headSite,	        				
	        				Color.BLACK, true);	        		
	        	}
	        	if(straightMessage != null) {
	        		straightMessage.setLabel(msg.getUMLName());
	        		straightMessage.setStartPoint(
	        				msg.getSendEvent().getLocTime()[1]);	        		
	        	}
	        }
	        else {
	        	System.out.println("I can only draw messages, and nothing else!");
	        }

			return straightMessage;
		}
		
		/** 
		 * For convenience... when there is no semantic object added to the
		 * Ptolemy model yet, but a Message shall be drawn, this method
		 * returns a dummy MessageConnector that has to be replaced later on
		 * with one that contains a UserObject.
		 * 
		 * Default color of arrowhead is BLACK.
		 * 
		 * @param tailSite - must not be null
		 * @param headSite - must not be null
		 * @return - a MessageConnector with default color BLACK of its
		 * arrowhead
		 */
		public Connector renderDummy(Site tailSite, Site headSite) {
			MessageConnector straightMessage = null;	
			straightMessage = new MessageConnector(tailSite, headSite,    				
    				Color.BLACK, false);
			return straightMessage;			
		}
	} // end of MessageRenderer-class

	/**
	 * This class defines targets to which the head of a Message might be 
	 * attached. If an appropriate target is found, a Site on the target can 
	 * be returned which will be the headSite of the MessageConnector.
	 * 
	 * @author Andreas Thuy
	 */	
	public class MessageTarget extends AbstractConnectorTarget {
				
		public boolean acceptHead(Connector c, Figure f) {
			if(f instanceof LifelineFigure) {
				if(c != null) {
					if(c.getTailSite() != null) {
						if(c.getTailSite().getFigure() != f) {
							if(c.getHeadSite() != null) {
								Point2D p = c.getHeadSite().getPoint();
								if(((LifelineFigure)f).isOnLiveLine(p)) {
									return true;
								}
							}
						}
					}
				}
			}
			return false;
		}

		public boolean acceptTail(Connector c, Figure f) {			
			if(f instanceof LifelineFigure) {
				if(c != null) {
					if(c.getHeadSite() != null) {
						if(c.getHeadSite().getFigure() != f) {
							if(c.getTailSite() != null) {
								Point2D p = c.getTailSite().getPoint();
								if(((LifelineFigure)f).isOnLiveLine(p)) {
									return true;
								}
							}
						}
					}
				}
			}
			return false;
		}

		// return a new LifelineSite that is located on the given 
		// LifelineFigure at y-position y
		public Site getHeadSite(Connector c, Figure f, double x, double y) {
			if(acceptHead(c, f)) {
				return new LifelineSite((LifelineFigure)f, y);
			}
			// something is going wrong... or this is the first time that 
			// a message is DRAWN
			//System.out.println("No Lifeline at the HEAD!");
			return null;			
		}

		// this one is normally not in use, the version with a connector as
		// an argument is used instead, however, this method must be implemented...
		public Site getHeadSite(Figure f, double x, double y) {
			if(f instanceof LifelineFigure) {
				Point2D.Double p = new Point2D.Double(x, y);
				if(((LifelineFigure)f).isOnLiveLine(p)) {
					return new LifelineSite((LifelineFigure)f, y);
				}
			}
			System.out.println("No Lifeline at the HEAD!");
			return null;
		}

		public Site getTailSite(Connector c, Figure f, double x, double y) {
			if(acceptTail(c, f)) {
				return new LifelineSite((LifelineFigure)f, y);
			}
			// something is going wrong...			
			System.out.println("No Lifeline at the TAIL!");
			return null;						
		}

		@Override
		// can be used to obtain a TailSite without the need to create a 
		// Connector first...
		public Site getTailSite(Figure f, double x, double y) {
			if(f instanceof LifelineFigure) {
				Point2D.Double p = new Point2D.Double(x, y);
				if(((LifelineFigure)f).isOnLiveLine(p)) {
					return new LifelineSite((LifelineFigure)f, y);
				}
			}
			System.out.println("No Lifeline at the TAIL!");
			return null;
		}				
	} // end of MessageTarget

	private MenuCreator configMenu = null;
	
	private PtolemyMenuFactory configMenuFactory = null;

	/**
	 * Constructor of this controller. Assign interactor and supply right-
	 * clicking 'Rename' menu on messages. Assign a ConnectorManipulator
	 * and make that messages are rendered as MessageConnectors.
	 * 
	 * @param controller - the overall graph controller
	 */
	public MessageController(GraphController controller) {						
		super(controller);
		SelectionModel sm = controller.getSelectionModel();
		setEdgeInteractor(new EdgeInteractor(sm));

		// a CompositeInteractor
		SelectionInteractor si = (SelectionInteractor)getEdgeInteractor();		
		
		// used for up and down dragging of messages
		EdgeDragInteractor eDI = new EdgeDragInteractor(this);
		si.addInteractor(eDI);							


		
				
		// allow to open a dialog that renames the Message when right-clicking
		// on the Message		
		this.configMenu = new MenuCreator(null)
		/* {			
			// now it's really enough!!!!!!!!
			// if my right mouse button is not recognized as a popup-trigger
			// then, I just don't test it!!! enough is enough
			public void mousePressed(LayerEvent e) {
				if(getMenuFactory() != null) {
		            Figure source = e.getFigureSource();
		            JPopupMenu menu = getMenuFactory().create(source);

		            if (menu == null) {
		                return;
		            }

		            menu.show(e.getComponent(), e.getX(), e.getY());
		            e.consume();
				}
			}
		}*/
		; 
//		this.configMenu.setMouseFilter(new PopupMouseFilter());
		((EdgeInteractor)getEdgeInteractor()).addInteractor(this.configMenu);
		this.configMenuFactory = new PtolemyMenuFactory(controller);
		this.configMenuFactory.addMenuItemFactory(new UMLRenameDialogFactory());
		this.configMenu.setMenuFactory(this.configMenuFactory);								
		
        // Create and set up the manipulator for MessageConnectors
        ConnectorManipulator manipulator = new ConnectorManipulator();
        ConnectorInteractor conAir = new ConnectorInteractor(manipulator) {

			
        	
        	@Override
			public void snapToSite(final FigureContainer container, 
					final Rectangle2D hitRect) {
                if(getHandle().getSite() == getConnector().getHeadSite()) {
                	Figure figure = container.pick(hitRect,
                			new Filter() {
                            	public boolean accept(Object o) {
                            		if (!(o instanceof LifelineFigure)) {
                            			return false;
                            		}

                            		Figure f = (Figure) o;

                            		if (f.getInteractor() == null) {
                            			return false;
                            		}

                            		TransformContext figureContext = f.getParent()
                            			.getTransformContext();
                            		TransformContext containerContext = container
                            			.getTransformContext();
                            		AffineTransform transform;

                            		try {
                            			transform = figureContext.getTransform(containerContext)
                            				.createInverse();
                            		} catch (Exception ex) {
                            			ex.printStackTrace();
                            			return false;
                            		}

                            		Rectangle2D bounds = ShapeUtilities.transformBounds(hitRect,
                            				transform);
                            
                            		if (getConnectorTarget().getHeadSite(
                            				getConnector(),
                            				f,
                            				bounds.getCenterX(),
                            				bounds.getCenterY()) == null) {
                            			return false;
                            		}

                            		return true; // we allow to set the site *g*
                            	}
                        	});

                	if (figure != null) {
                		Site snap = getConnectorTarget().getHeadSite(                				
                				figure,
                				hitRect.getCenterX(),
                				getConnector().getTailSite().getY());

                		if (snap != null) {
                			
                			_target = figure;
                	        if (getHandle().getSite() == getConnector().
                	        		getHeadSite()) {
                	            getConnector().setHeadSite(snap);
                	        } 
                	        getHandle().setSite(snap);
                	        getHandle().repaint();
                			fireConnectorEvent(ConnectorEvent.CONNECTOR_SNAPPED);
                		}
                	}
                }
               else {
                	super.snapToSite(container, hitRect);
                }
			}

			@Override
			public void translate(LayerEvent e, double dx, double dy) {
				super.translate(e, dx, 0);
			}
			
			
        	
        };
        manipulator.setHandleInteractor(conAir);
        manipulator.setSnapHalo(5.0);
        manipulator.addConnectorListener(new MessageDropper());
        MouseFilter handleFilter = new MouseFilter(1, 0, 0);
        manipulator.setHandleFilter(handleFilter);                

        ((EdgeInteractor)getEdgeInteractor()).
        		setPrototypeDecorator(manipulator);

        // set the ConnectorTarget
        ConnectorTarget ct = new MessageTarget();
		setConnectorTarget(ct);
		
		// and the renderer
		setEdgeRenderer(new MessageRenderer());
	}
	

	/**
	 * This method takes care of the graphical removing. 
	 * 
	 * @see diva.graph.EdgeController#clearEdge(java.lang.Object)
	 */
	public void clearEdge(Object edge) {        
		Figure f = getController().getFigure(edge);
        if (f != null) {
            if(f instanceof MessageConnector) {
            	LabelFigure lFigure = ((MessageConnector)f).getLabelFigure();
            	if(lFigure != null) {
            		lFigure.setUserObject(null);            	
            		CanvasComponent container = f.getParent();
            		if(container instanceof FigureLayer) {
            			((FigureLayer)container).remove(lFigure);
            			((FigureLayer)container).remove(f);
            		}
            		// TODO what happens if it is not a FigureLayer in an
            		// exceptional case??? => does call of super.clearEdge
            		// handle this?
            	}
            }
        	
        }
		super.clearEdge(edge);
	}
	
	/* (non-Javadoc)
	 * @see diva.graph.EdgeController#drawEdge(java.lang.Object)
	 */
	public Figure drawEdge(Object edge) {				
        GraphModel model = getController().getGraphModel();
        FigureLayer layer = getController().getGraphPane().getForegroundLayer();
        
        // these two should be MessageOccurrenceSpecifications
        // TODO really?
        MessageOccurrenceSpecification tail = (MessageOccurrenceSpecification)
        		model.getTail(edge);
        MessageOccurrenceSpecification head = (MessageOccurrenceSpecification)
        		model.getHead(edge);

        // problems with NullPointerExceptions in the following part should 
        // never occur here tested before this method is called
        String tailName = tail.getLifeline().getRepresents();
        String headName = head.getLifeline().getRepresents();
        UMLSeqActor container = (UMLSeqActor)model.getRoot();
        Lifeline tailLifeline = null;
        Lifeline headLifeline = null;
        try {
        	tailLifeline = (Lifeline)container.getAttribute(
        			tailName, Lifeline.class);
        	headLifeline = (Lifeline)container.getAttribute(
        			headName, Lifeline.class);
        }
        catch(IllegalActionException iAE) {
        	iAE.printStackTrace();
        }
        
        Connector c = null;
        if(tailLifeline != null && headLifeline != null) {
        	Figure tailFigure = getController().getFigure(
        			tailLifeline.getLocation());
        	Figure headFigure = getController().getFigure(
        			headLifeline.getLocation());

        	Site tailSite;
        	Site headSite;

        	// Get a tail site based on the tail figure.                
        	double[] sendTime = tail.getLocTime();
        	tailSite = getConnectorTarget().getTailSite(tailFigure,
        			tailLifeline.getLocation().getLocation()[0], sendTime[1]);
        
        	// Get a head site based on the head figure.        
        	double[] receiveTime = head.getLocTime();
        	headSite = getConnectorTarget().getHeadSite(headFigure,
        			headLifeline.getLocation().getLocation()[0], receiveTime[1]);        
        
        	// Create the Connector
        	c = render(edge, layer, tailSite, headSite);
        	getController().dispatch(new GraphViewEvent(this,
                                     GraphViewEvent.EDGE_DRAWN,
                                     edge));
        }
        return c;
	}
	
	public Connector render(Object edge, FigureLayer layer, Site tailSite,
			Site headSite) {
        Connector msgConnector = null;
		if(edge != null) {		
			msgConnector = super.render(edge, layer, tailSite, headSite);  
		}
        return msgConnector;
	}
	
	/**
	 * Render a dummy MessageConnector with no UserObject assigned to it.
	 * 
	 * @param layer
	 * @param tailSite
	 * @param headSite
	 * @return
	 */
	public Connector renderDummyMessage(FigureLayer layer, Site tailSite,
			Site headSite) {
    	Connector ef = ((MessageRenderer)getEdgeRenderer()).renderDummy(
    			tailSite, headSite);
    	ef.setInteractor(getEdgeInteractor());

    	layer.add(ef);
    	ef.route();
    	return ef;		
	}
}
