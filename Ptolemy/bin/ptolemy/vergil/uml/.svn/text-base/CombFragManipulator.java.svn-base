package ptolemy.vergil.uml;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import ptolemy.kernel.util.Location;
import ptolemy.moml.MoMLChangeRequest;
import diva.canvas.CanvasUtilities;
import diva.canvas.Figure;
import diva.canvas.FigureDecorator;
import diva.canvas.Site;
import diva.canvas.connector.CenterSite;
import diva.canvas.event.LayerEvent;
import diva.canvas.interactor.BasicGrabHandle;
import diva.canvas.interactor.BoundsGeometry;
import diva.canvas.interactor.DragInteractor;
import diva.canvas.interactor.GrabHandle;
import diva.canvas.interactor.GrabHandleFactory;
import diva.canvas.interactor.Interactor;
import diva.canvas.interactor.Manipulator;
import diva.canvas.interactor.MoveHandle;

public class CombFragManipulator extends Manipulator {

	public CombFragManipulator() {
		super();
		setHandleInteractor(new Resizer());
	}

	public CombFragManipulator(GrabHandleFactory f) {
		setGrabHandleFactory(f);
        setHandleInteractor(new Resizer());
	}
	
	public FigureDecorator newInstance(Figure f) {
        CombFragManipulator combFrag = new CombFragManipulator();
        combFrag.setGrabHandleFactory(this.getGrabHandleFactory());
        combFrag.setHandleInteractor(this.getHandleInteractor());
        combFrag.setDragInteractor(getDragInteractor());
        return combFrag;
	}

	/* (non-Javadoc)
	 * @see diva.canvas.FigureDecorator#setChild(diva.canvas.Figure)
	 * 
	 * Set the child of this decorator. GrapHandles are only attached to the
	 * NORTH and SOUTH.
	 */
	public void setChild(Figure child) {		        							
		if (getChild() != null) {
        	getChild().repaint();
        	getChild().setParent(null);
        }
        replaceChild(getChild(), child);
        if (getChild() != null) {
            getChild().setParent(this);
            getChild().repaint();
        }
        clearGrabHandles();

        // Process new child
        if (child != null) {
            // Create the geometry defining the sites            
        	_geometry = new BoundsGeometry(this, getChild().getBounds());

            ArrayList list = new ArrayList();
            list.add(_geometry.getN());
            list.add(_geometry.getS());
        	Iterator i = list.iterator(); 
            	
            GrabHandle g = null;
            while (i.hasNext()) {
                // Create a grab handle and set up the interactor
                Site site = (Site)i.next();
                g = getGrabHandleFactory().createGrabHandle(site);
                g.setParent(this);
                g.setInteractor(getHandleInteractor());
                addGrabHandle(g);
            }
            // Add a center handle for dragging
            if (getDragInteractor() != null) {
                CenterSite center = new CenterSite(getChild());
                GrabHandle mover = new MoveHandle(center);
                mover.setParent(this);
                mover.setInteractor(getDragInteractor());
                addGrabHandle(mover);
            }

            // Move them where they should be - ?
            relocateGrabHandles();

            // Set the minimum size
            // FIXME: this is bogus: set it in the interactor instead!
            _geometry.setMinimumSize(4*g.getSize());
        }

	}
    /** The geometry "helper"
     */
    protected BoundsGeometry _geometry;

    /** The interactor that is attached to a move handle.
     */
    private Interactor _dragInteractor = null;

    /** Return the interactor that is attached to a move handle.
     */
    public Interactor getDragInteractor() {
        return _dragInteractor;
    }

    /** Return the geometry of this manipulator
     */
    public BoundsGeometry getGeometry() {
        return _geometry;
    }

    /** Do nothing.  This method is called when the resizer gets a mouse
     *  released event, indicating that resizing is complete. Subclasses
     *  may wish to override this to, for example, make a persistent record
     *  of the new size (which can be obtained by calling
     *  getChild().getBounds()).
     *  @param e The mouse event.
     */
    public void mouseReleased(LayerEvent e) {
    	Figure f = e.getFigureSource();
    	if(f instanceof BasicGrabHandle) {
    		if(f.getParent() instanceof CombFragManipulator) {
    			CombFragFigure combFigure = (CombFragFigure)((
    					CombFragManipulator)f.getParent()).getChild();
    		
    		CombinedFragment combi = (CombinedFragment)((Location)combFigure.
    				getUserObject()).getContainer();
    		double combYValue = combi.getLocation().getLocation()[1];
    		if(combYValue < e.getY()) {
    			List locList = combi.attributeList(Location.class);
    			if(locList.size() == 1) {
    				Location loc = (Location)locList.get(0);
    				String locName = loc.getName();    			
    			double newY = ((combYValue - combi.getHeigth() / 2) + e.getY()) / 2;
    			double newHeight = (e.getY() - newY) * 2;
    			double[] newLoc = {combi.getLocation().getLocation()[0], newY};
    			combi.setHeigth(newHeight);
    			StringBuffer momelString = new StringBuffer();
    			String buf = "<group>";
    			momelString.append(buf);
    			buf = "<property name=\"" + combi.getName() + "\">";
    			momelString.append(buf);
    			buf = "<property name=\"" + locName + "\" value=\"[" + 
    				newLoc[0] + ", " + newLoc[1] + "]\"/>";
    			momelString.append(buf);
    			buf = "</property>";
    			momelString.append(buf);
    			buf = "</group>";
    			momelString.append(buf);
    			combi.getContainer().requestChange(new MoMLChangeRequest(
    					combi.getContainer(), combi.getContainer(), momelString.toString()));
    			}
    		}
    		else {
    			List locList = combi.attributeList(Location.class);
    			if(locList.size() == 1) {
    				Location loc = (Location)locList.get(0);
    				String locName = loc.getName();    			
    			double newY = ((combYValue + combi.getHeigth() / 2) + e.getY()) / 2;
    			double newHeight = (newY - e.getY()) * 2;
    			double[] newLoc = {combi.getLocation().getLocation()[0], newY};
    			combi.setHeigth(newHeight);
    			StringBuffer momelString = new StringBuffer();
    			String buf = "<group>";
    			momelString.append(buf);
    			buf = "<property name=\"" + combi.getName() + "\">";
    			momelString.append(buf);
    			buf = "<property name=\"" + locName + "\" value=\"[" + 
    				newLoc[0] + ", " + newLoc[1] + "]\"/>";
    			momelString.append(buf);
    			buf = "</property>";
    			momelString.append(buf);
    			buf = "</group>";
    			momelString.append(buf);
    			combi.getContainer().requestChange(new MoMLChangeRequest(
    					combi.getContainer(), combi.getContainer(), momelString.toString()));
    			}
    		}
    		}
    	}
    }

    /** Refresh the geometry. This adjusts the bounds of the geometry
     * to match the bounds of the child figure.
     */
    public void refresh() {
        if (_geometry != null) {
            _geometry.setBounds(getChild().getBounds());
        }
    }

    /** Set the drag interactor for figures wrapped by this
     * manipulator. If set, the manipulator displays an additional
     * handle that can be used to drag the figure. This is useful
     * for certain types of figure that are outlines only.
     */
    public void setDragInteractor(Interactor dragger) {
        _dragInteractor = dragger;
    }

    ///////////////////////////////////////////////////////////////////
    //// Resizer

    /** An interactor class that changes the bounds of the child
     * figure and triggers a repaint.
     */
    private class Resizer extends DragInteractor {
        /** Override the base class to notify the enclosing BoundsInteractor.
         *  @param e The mouse event.
         */
        public void mouseReleased(LayerEvent e) {
            super.mouseReleased(e);
            CombFragManipulator.this.mouseReleased(e);
        }

        /** Translate the grab-handle
         */
        public void translate(LayerEvent e, double x, double y) {
            // Translate the grab-handle, resizing the geometry
            GrabHandle g = (GrabHandle) e.getFigureSource();
            g.translate(x, y);

            // Transform the child.
            CombFragManipulator parent = (CombFragManipulator) g.getParent();
            BoundsGeometry geometry = parent.getGeometry();

            parent.getChild().transform(CanvasUtilities.computeTransform(
                                                parent.getChild().getBounds(), geometry.getBounds()));
        }
    }

}
