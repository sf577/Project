//Copyright (c) 2007 Leandro Soares Indrusiak
//All rights reserved.
//Darmstadt, 14/06/2007.
//Version 1.0

//Copyright (c) 2008 Leandro Moller
//All rights reserved.
//Darmstadt, 29/10/2008.
//Version 2.0

package lsi.noc.nocscope2;

import ptolemy.actor.TypedAtomicActor;
import ptolemy.actor.TypedCompositeActor;
import ptolemy.kernel.CompositeEntity;
import ptolemy.kernel.util.IllegalActionException;
import ptolemy.kernel.util.NameDuplicationException;
import ptolemy.kernel.util.NamedObj;
import java.util.List;
import javax.swing.JFrame;


////NoCScopeActor
/**
 * Base class for all NoCScopeActors. Handles its input ports in a bidimentional array.
 * It contains a concrete Scope, which is the GUI element displaying pertinent information
 * about particular NoC elements. A Scope is a subclass of JPanel and is added to a JFrame,
 * which is displayed permanently from the first initialization of the NoCScopeActor. Thus,
 * visual results are overwritten upon each new simulation.
 *
 *
 * @author Leandro Indrusiak
 */

public abstract class NoCScopeActor extends TypedAtomicActor {

    JFrame _frame;
    NoCScope _nocscope;
    int nports, maxwidth;
    private int xdimension, ydimension;
    static final int windowSize = 1000;
    
	public NoCScopeActor(CompositeEntity container, String name)
	throws NameDuplicationException, IllegalActionException  {
		super(container, name);
		_frame=new JFrame("NoCScope");
	}

	public void initialize() throws IllegalActionException{

		super.initialize();
		nports=0;
		maxwidth=0;
		xdimension=0;
		ydimension=0;

	    getNoCDimensions();
	    _nocscope= createScope();
	    
		_frame.getContentPane().add(_nocscope);
		_frame.setSize(xdimension*100+10,ydimension*100+28);
		_frame.setVisible(true);
	}

	public abstract NoCScope createScope();

	/**
     *  Get the NoC dimensions.
     */
	public void getNoCDimensions(){
	    //get the top level workspace
        NamedObj container = getContainer().getContainer();
        //get a list of actors in the top level workspace
        List l1 = ((CompositeEntity)container).entityList(TypedCompositeActor.class);
        //scanning list of actors in the workspace
        for(int i=0; i<l1.size();i++){
            //verify if it is the desired actor
            if(l1.get(i).toString().indexOf("router")!=-1) {
                //get the compositeActor actor
                TypedCompositeActor compositeActor=(TypedCompositeActor)l1.get(i);
                //get a list of actors in the compositeActor workspace
                List l2=compositeActor.deepEntityList();
                //scanning list of actors in the compositeActor workspace
                for(int j=0; j<l2.size();j++){
                    //verify if it is the desired actor
                    if(l2.get(j).toString().indexOf("Arbiter")!=-1) {
                        //get the TLMArbiter actor
                        TypedAtomicActor arbiter=(TypedAtomicActor)l2.get(j);
                        //get a list of actors in the TLMArbiter workspace
                        List l3=arbiter.attributeList();
                        //scanning list of actors in the TLMArbiter workspace
                        for(int k=0; k<l3.size();k++){
                            //verify if it is the desired parameter
                            if(l3.get(k).toString().indexOf("TLMArbiter.x")!=-1){
                                //get the parameter line
                                String xdim = l3.get(k).toString();
                                //get the parameter value
                                xdim = xdim.substring(xdim.lastIndexOf("}")+2).trim();
                                //convert to integer
                                int xdimension = Integer.parseInt(xdim,10);
                                //stores only the biggest value
                                if(this.xdimension<xdimension)
                                    this.xdimension = xdimension;
                            }
                          //verify if it is the desired parameter
                            else if(l3.get(k).toString().indexOf("TLMArbiter.y")!=-1){
                                //get the parameter line
                                String ydim = l3.get(k).toString();
                                //get the parameter value
                                ydim = ydim.substring(ydim.lastIndexOf("}")+2).trim();
                                //convert to integer
                                int ydimension = Integer.parseInt(ydim,10);
                                //stores only the biggest value
                                if(this.ydimension<ydimension)
                                    this.ydimension = ydimension;
                            }
                        }
                    }
                }
            }
        }
        xdimension++;
        ydimension++;
	}
	
	public int getXDimension(){
	    return xdimension;
	}
	
    public int getYDimension(){
        return ydimension;
    }
    
    public int getFrameWidth()
    {
        return _frame.getWidth();
    }
    
    public int getFrameHeight()
    {
        return _frame.getHeight();
    }
}
