/**
 * 
 */
package lsi.noc.stats;

import java.io.*;

/**
 * @author Leandro Soares Indrusiak
 * @version 1.0 (York, 17/08/2009)
 *
 * Reads files generated by earlier versions of mappers and feeds the data to an instance of BasicCommunicationLatencyAnalysis, then writes the report to a plain text file.
 *
 */
public class FileCLAnalysis {

	
	public static void main(String[] args){
		
		new FileCLAnalysis();
		
	}
	
	
	public FileCLAnalysis(){
		
	
		BasicCommunicationLatencyAnalysis analiser = new BasicCommunicationLatencyAnalysis();
		
		String curDir = System.getProperty("user.dir");
        File dir = new File(curDir);
		File[] children = dir.listFiles();
		    if (children != null) {
		        for (int i=0; i<children.length; i++) {
		            
		    //        try{
		            String contents = getContents(children[i]);
		            String[] tokenizedContents = contents.split(" ");
//System.out.println("new File: "+children[i].getName());
//System.out.println("tokens: "+tokenizedContents.length);

		            for(int j=0;j<tokenizedContents.length/4;j++){
		            
		            //parses every 4th String of the array 	
	            	Double lat = Double.parseDouble(tokenizedContents[4*j+3]);
		            analiser.notifyReceipt(children[i].getName()/*.split(".")[0]*/, lat);
		            
		            }
		      //      }
		      //      catch (Exception e){System.out.println(e);}
		            
		        }
		    }

		
		System.out.println(analiser.report()[0]);
		
		
	}
	
	
	
	static public String getContents(File aFile) {
	    //...checks on aFile are elided
	    StringBuilder contents = new StringBuilder();
	    
	    try {
	      //use buffering, reading one line at a time
	      //FileReader always assumes default encoding is OK!
	      BufferedReader input =  new BufferedReader(new FileReader(aFile));
	      try {
	        String line = null; //not declared within while loop
	        /*
	        * readLine is a bit quirky :
	        * it returns the content of a line MINUS the newline.
	        * it returns null only for the END of the stream.
	        * it returns an empty String if two newlines appear in a row.
	        */
	        while (( line = input.readLine()) != null){
	          contents.append(line);
	          contents.append(" ");
	        }
	      }
	      finally {
	        input.close();
	      }
	    }
	    catch (IOException ex){
	      ex.printStackTrace();
	    }
	    
	    return contents.toString();
	  }

	
	
	
	
}
