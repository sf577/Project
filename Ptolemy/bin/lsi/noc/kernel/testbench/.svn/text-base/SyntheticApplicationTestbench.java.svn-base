package lsi.noc.kernel.testbench;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Point;

import javax.swing.JFrame;

import lsi.noc.kernel.Mesh2DNoC;
import lsi.noc.kernel.Mesh2DNoCFactory;
import lsi.noc.kernel.Mesh2DXYRouting;
import lsi.noc.kernel.Platform;
import lsi.noc.kernel.mapping.Mesh2DRouteFactory;
import lsi.noc.kernel.mapping.RandomMapping;
import lsi.noc.kernel.priority.NoCSchedulabilityAnalysis;
import lsi.noc.kernel.priority.PrecedenceBasedPriorityMinimizer;
import lsi.noc.kernel.priority.PriorityTrafficFlow;
import lsi.noc.kernel.visualisation.RouteViewer;
import lsi.noc.nocscope2.UtilizationScope;

public class SyntheticApplicationTestbench extends Testbench{
	

	public static void main(String[] args){
		
		SyntheticApplicationTestbench tb = new SyntheticApplicationTestbench();
		tb.start();
		
	}
	
	
	public void run(){

		/*
		 *  Recipe for a testbench:
		 *  
		 *  1 - define the NoC parameters (dimensions, switch latencies)
		 *  2 - create the NoC and use it to create a platform model
		 *  3 - create an application model
		 *  4 - create a mapper and use it to map all application tasks onto platform processing elements
		 *  5 - create a routefactory to create flows and their respective routes for all mapped tasks
		 *  
		 *  optionals:
		 *  
		 *  6 - create a schedulability analysis, to add the task response time as release jitter to their respective flows and then evaluate schedulability 
		 * 	7 - use a RouteViewer to visualise all routes
		 *  8 - use a priority minimizer to verify the minimum number of priority levels
		 */
		
		
		
		//NoC dimensions
		x = 4;
		y = 4;

		
		//time a flit takes to traverse a link
		trav=0.00000001;
		//time to route a header
		rout=0.00000002;  

		Mesh2DNoCFactory factory = new Mesh2DNoCFactory();
		network = (Mesh2DNoC)factory.createInterconnect(x,y);
		network.setHopDelay(trav);
		network.setRoutingDelay(rout);
		plat = new Platform(network);
		
		routingalgorithm = new Mesh2DXYRouting();
		
		
		
		app = new SyntheticApplication();
		
		RandomMapping mapper = new RandomMapping(app,plat);
		mapper.performMapping();
//		customMapping();

		
		Mesh2DRouteFactory routefactory = new Mesh2DRouteFactory(app, network);
		routefactory.createRoutes(routingalgorithm);
		
		
		
		NoCSchedulabilityAnalysis analysis = new NoCSchedulabilityAnalysis(app,network);
		analysis.performAnalysis();
		
		System.out.println("unschedulable tasks: "+analysis.getUnschedulableTaskCount());
		System.out.println("unschedulable flows: "+analysis.getUnschedulableFlowCount());
		
		
		setTitle("Autonomous Vehicle");

		displayRoutes(title);
		
		displayApplicationGraph(title);

		report();			

		PrecedenceBasedPriorityMinimizer minim = new PrecedenceBasedPriorityMinimizer(app.getFlows());

		
	}
	
	

	
	
	public void customMapping(){
		
		app.getTasks().get(0).setCore(network.getCore(0, 3));
		app.getTasks().get(1).setCore(network.getCore(2, 0));
		app.getTasks().get(2).setCore(network.getCore(0, 0));
		app.getTasks().get(3).setCore(network.getCore(1, 2));
		app.getTasks().get(4).setCore(network.getCore(2, 3));
		app.getTasks().get(5).setCore(network.getCore(0, 2));
		app.getTasks().get(6).setCore(network.getCore(0, 1));
		app.getTasks().get(7).setCore(network.getCore(2, 2));
		app.getTasks().get(8).setCore(network.getCore(3, 2));
		app.getTasks().get(9).setCore(network.getCore(3, 2));
		app.getTasks().get(10).setCore(network.getCore(3, 3));
		app.getTasks().get(11).setCore(network.getCore(1, 0));
		app.getTasks().get(12).setCore(network.getCore(2, 0));
		app.getTasks().get(13).setCore(network.getCore(0, 3));
		app.getTasks().get(14).setCore(network.getCore(1, 2));
		app.getTasks().get(15).setCore(network.getCore(0, 2));
		app.getTasks().get(16).setCore(network.getCore(1, 3));
		app.getTasks().get(17).setCore(network.getCore(3, 3));
		app.getTasks().get(18).setCore(network.getCore(3, 1));
		app.getTasks().get(19).setCore(network.getCore(3, 0));
		app.getTasks().get(20).setCore(network.getCore(2, 1));
		app.getTasks().get(21).setCore(network.getCore(1, 1));
		app.getTasks().get(22).setCore(network.getCore(1, 1));
		app.getTasks().get(23).setCore(network.getCore(2, 3));
		app.getTasks().get(24).setCore(network.getCore(1, 3));
		app.getTasks().get(25).setCore(network.getCore(1, 0));
		
	}
	

	
	
}
