 package lsi.noc.kernel;


/* 
 * @author      Leandro Soares Indrusiak
 * @version 1.0 (York, 28/09/2009) 
*/


public class Mesh2DNoCFactory extends NoCFactory {

	NoC mesh2D;

	/**
	  * Generates a network-on-chip with at least <i>procs</i> processors and a square 
	  * 2D mesh topology. The generated NoC will be the smallest square 2D mesh that 
	  * can hold the number of processing cores passed as argument to the method. 
	  * 
	  *  @param  procs number of processing cores  
	  * 
	  *  
	  */


	public Interconnect createInterconnect(int procs) {

		mesh2D = new Mesh2DNoC();

		int dim = (int)Math.ceil(Math.sqrt(procs));

		return createInterconnect(dim,dim);

	}

	
	/**
	  * Generates a network-on-chip with a 2D mesh topology of width <i>x</i> and height <i>y</i>. 
	  * The number of processing cores
	  * attached to the NoC will be <i>x*y</i>.
	  * 
	  *  @param  x width of the 2D mesh
	  *  @param  y height of the 2D mesh
	  *  
	  */

	public Interconnect createInterconnect(int x, int y) {	

		mesh2D = new Mesh2DNoC();
		Mesh2DRouter[][] index = new Mesh2DRouter[x][y];

		// creates all cores
		// creates all routers
		// connects cores to the local port of their respective routers


		for (int i=0; i<x ; i++){

			for (int j=0; j<y ; j++){

				ProcessingCore p = new ProcessingCore();
				Mesh2DRouter r = new Mesh2DRouter();

				DirectedLink l1 = new DirectedLink();
				DirectedLink l2 = new DirectedLink();

				p.setOutput(l2);
				r.setInputLink(l2, Mesh2DRouter.LOCAL);

				r.setOutputLink(l1, Mesh2DRouter.LOCAL);
				p.setInput(l1);


				mesh2D.cores.add(p);
				mesh2D.routers.add(r);
				mesh2D.links.add(l1);
				mesh2D.links.add(l2);
				index[i][j]=r;


			}

		}

		
		//connects routers to its neighbours to form the 2D mesh

		
		for (int i=0; i<x ; i++){

			for (int j=0; j<y ; j++){
				
				//add output link to the west direction (except column where i=0)
				if(i!=0){
					
					DirectedLink lwest = new DirectedLink();
					index[i][j].setOutputLink(lwest,Mesh2DRouter.WEST);
					index[i-1][j].setInputLink(lwest, Mesh2DRouter.EAST);					
					mesh2D.links.add(lwest);
						
				}
				
				//add output link to the east direction (except column where i=x-1)
				if(i!=x-1){
					
					DirectedLink least = new DirectedLink();
					index[i][j].setOutputLink(least,Mesh2DRouter.EAST);
					index[i+1][j].setInputLink(least, Mesh2DRouter.WEST);					
					mesh2D.links.add(least);
						
				}
				
				//add output link to the south direction (except row where j=0)
				if(j!=0){
					
					DirectedLink lsouth = new DirectedLink();
					index[i][j].setOutputLink(lsouth,Mesh2DRouter.SOUTH);
					index[i][j-1].setInputLink(lsouth, Mesh2DRouter.NORTH);					
					mesh2D.links.add(lsouth);
						
				}
				
				//add output link to the north direction (except column where j=y-1)
				if(j!=y-1){
					
					DirectedLink lnorth = new DirectedLink();
					index[i][j].setOutputLink(lnorth,Mesh2DRouter.NORTH);
					index[i][j+1].setInputLink(lnorth, Mesh2DRouter.SOUTH);					
					mesh2D.links.add(lnorth);
						
				}
				
				
				
			}

		}

		((Mesh2DNoC)mesh2D).index=index;
		return mesh2D;

	}






}
