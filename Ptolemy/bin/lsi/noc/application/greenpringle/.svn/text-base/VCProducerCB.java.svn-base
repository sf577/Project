package lsi.noc.application.greenpringle;

import ptolemy.data.BooleanToken;
import ptolemy.data.DoubleToken;
import ptolemy.data.IntToken;
import ptolemy.data.RecordToken;
import ptolemy.data.Token;
import ptolemy.data.expr.Parameter;
import ptolemy.data.type.BaseType;
import ptolemy.kernel.CompositeEntity;
import ptolemy.kernel.util.IllegalActionException;
import ptolemy.kernel.util.NameDuplicationException;
/**

* @author Leandro Indrusiak
* @version 1.0 (York, 27/2/2009)

*/
public class VCProducerCB extends VCProducer {
    
	private int credits; //stores the credits available on remote buffer
	protected double period;
	public Parameter cred, per;
	
	public VCProducerCB(CompositeEntity container, String name)
    
    throws NameDuplicationException, IllegalActionException  {
        super(container, name);
        ack_in.setTypeEquals(BaseType.INT);
        
        cred=new Parameter(this, "Initial credits");
        cred.setTypeEquals(BaseType.INT);
        per=new Parameter(this, "Period");
        per.setTypeEquals(BaseType.DOUBLE);
        
        
     }
	
	public void initialize() throws IllegalActionException {
		super.initialize();
		
		//all output ports and vcs have full credits upon initialization
		
		
		period=((DoubleToken)per.getToken()).doubleValue();
		credits=((IntToken)cred.getToken()).intValue();
		currentTime_=getDirector().getModelTime();

		
	}
	
	
    public boolean prefire() throws IllegalActionException {
        
       
        //update credits
    	

        if (ack_in.hasToken(vc)) {
            
            IntToken credit = (IntToken) ack_in.get(vc);
//            credits=credit.intValue();
            credits++;
            if(_debugging) _debug(getDirector().getModelTime()+" credit update received: " + credits);

            
        }
    	
        return true;
   
        
    }
	
	
	
    public void fire() throws IllegalActionException {
        

        if (!busy_ && buffer_.size() > 0) {
        	   
            
            busy_ = true;
            
            packetToSend_ = getPacketToSend_();
            size_ = ((IntToken)packetToSend_.get("size")).intValue();
            if(_debugging) _debug("setting packet to be sent - size: " + size_);

            

        }

        
        if (busy_ && credits!=0 && (-1==currentTime_.compareTo(getDirector().getModelTime())) ) {
         
            data_out.send(vc, packetToSend_);
            credits--;

           
            currentTime_ = getDirector().getModelTime();
            getDirector().fireAt(this, currentTime_.add(period));

            if(_debugging) _debug(currentTime_+" packet sent - credits: " + credits);
            
            
            flitCounter_ = flitCounter_ + 1;
            
            if (flitCounter_ < (size_ + 2)) {
                
                busy_ = true;
                
            } else {
                
                busy_ = false;
                flitCounter_ = 0;
                
            }
            

                      
        } 

        
    }
	
    
    public void sendPacket(Token token, int x, int y, int id, int size, int subPacketSize) 
    throws IllegalActionException {
        
        if (size > subPacketSize) {
            
            int packets = size / subPacketSize;
                                   
            int rest = size % subPacketSize;
                                    
            for (int i = 0; i < packets; i++) {
                
                
                if (rest == 0 && i == (packets - 1)) {
                    
                    RecordToken tmpPacket = createPacket(x, y, id, token, subPacketSize, true);
                    addToBuffer_(tmpPacket);  
                    
                } else {
                    
                    RecordToken tmpPacket = createPacket(x, y, id, token, subPacketSize, false);
                    addToBuffer_(tmpPacket);
                    
                }
                
               
            }
            
            if (rest != 0) {
                
                RecordToken tmpPacket = createPacket(x, y, id, token, rest, true);
                addToBuffer_(tmpPacket);
                
            }
            
        } else {
        
            RecordToken tmpPacket = createPacket(x, y, id, token, size, true);
            addToBuffer_(tmpPacket);
        
        }
        
        if (!busy_) {
        
                         
            if(_debugging) _debug("a token should be sent out");
             
    		getDirector().fireAt(this, getDirector().getModelTime().add(period));
        }
        
    }
	
}
