<!-- $Id: ptII6.0.release.htm,v 1.7.2.7 2007/02/04 17:31:09 cxh Exp $ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Ptolemy II 6.0.2 Release Notes</title>
<link href="default.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#faf0e6">
<h1>Ptolemy II 6.0.2 Release Notes</h1>

Ptolemy II is a set of Java packages supporting heterogeneous,
concurrent modeling and design.  Its <code>kernel</code> package
supports clustered hierarchical graphs, which are collections of
<I>entities</I> and <I>relations</I> between those entities.  Its
<code>actor</code> package extends the kernel so that entities have
functionality and can communicate via the relations.  Its
<I>domains</I> extend the actor package by imposing <I>models of
computation</I> on the interaction between entities.  Examples of
models of computation include discrete-event systems, dataflow,
process networks, synchronous/reactive systems, and communicating
sequential processes.

 <p>Ptolemy II includes a number of support packages, such as 

 <br><code>data</code>, providing a type system, data encapsulation and an
 expression parser,

 <br><code>plot</code>, providing visual display of data,

 <br><code>math</code>, providing matrix and vector math and signal
processing functions, and

 <br><code>graph</code>, providing graph-theoretic manipulations.


 <p>The three volumes of the Ptolemy II Design Document
describes the Ptolemy II design and
the implementation of the Java classes.
<ul>
 <li><a href="design/ptIIdesign1-intro.pdf">Volume 1: Introduction to Ptolemy II</a> (Local PDF)
 <li><a href="design/ptIIdesign2-software.pdf">Volume 2: Ptolemy II Software Architecture</a> (Local PDF)
 <li><a href="design/ptIIdesign3-domains.pdf">Volume 3: Ptolemy II Domains</a> (Local PDF)
</ul>

 <p>The
"<a href="design/usingVergil/index.htm">Using Vergil</a>"
describes how to use Vergil.


<h2>Complete List of Domains in Ptolemy II</h2>
 <!-- We include this list here since we will be posting the release notes
to the newsgroups etc.  See also main.htm
 -->
<ul>
<li> <a href="../ptolemy/domains/ci/doc/body.htm" target="body">CI</a>:
	 component interaction (experimental),
<li> <a href="../ptolemy/domains/csp/doc/body.htm" target="body">CSP</a>:
	 communicating sequential processes,
<li> <a href="../ptolemy/domains/ct/doc/body.htm" target="body">CT</a>:
	continuous-time modeling,
<li> <a href="../ptolemy/domains/de/doc/body.htm" target="body">DE</a>:
	discrete-event modeling,
<li> <a href="../ptolemy/domains/dde/doc/body.htm" target="body">DDE</a>:
	distributed discrete events (experimental),
<li> <a href="../ptolemy/domains/ddf/doc/body.htm" target="body">DDF</a>:
	dynamic dataflow
<li> <a href="../ptolemy/domains/dt/doc/body.htm" target="body">DT</a>:
	discrete time,
<li> <a href="../ptolemy/domains/fsm/doc/body.htm" target="body">FSM</a>:
	finite state machines,
<li> <a href="../ptolemy/domains/giotto/doc/body.htm" target="body">Giotto</a>:
	periodic time-driven (experimental),
<li> <a href="../ptolemy/domains/gr/doc/body.htm" target="body">GR</a>:
	3-D graphics (experimental),
 <!-- petrinet ??-->
<li> <a href="../ptolemy/domains/hdf/doc/body.htm" target="body">HDF</a>:
	heterochronous dataflow
<li> <a href="../ptolemy/domains/pn/doc/body.htm" target="body">PN</a>:
	process networks,
<li> <a href="../ptolemy/domains/psdf/doc/body.htm" target="body">PSDF</a>:
	parameterized synchronous dataflow (experimental),
<li> <a href="../ptolemy/domains/rendezvous/doc/body.htm" target="body">Rendezvous</a>:
	rendezvous (experimental),
<li> <a href="../ptolemy/domains/sdf/doc/body.htm" target="body">SDF</a>:
	synchronous dataflow,
<li> <a href="../ptolemy/domains/sr/doc/body.htm" target="body">SR</a>:
	synchronous/reactive,
<li> <a href="../ptolemy/domains/tm/doc/body.htm" target="body">TM</a>:
	timed multitasking (experimental), and
<li> <a href="../ptolemy/domains/wireless/doc/body.htm" target="body">Wireless</a>:
	 wireless (experimental).

</ul>

<h2>Platforms</h2>

The core of Ptolemy II 5.0 is 100% Java, so it should work on any
platform that has JDK 1.4 or later.

 <p>We developed Ptolemy II 5.0 under Solaris 8 and Windows XP sp2
and with JDK1.4.2_08.

<p>Ptolemy II 5.0 will not compile under Java 1.3 because we use the
java.lang.URI class, which is present only in Java 1.4 and later.

 <p>Ptolemy II has been compiled and run
under IBM JDK 1.4.2_01-b06.  There are the following limitations
under IBM JDK 1.4.2:
<menu>
<li> The Copernicus code generator does not work.
<li> Caltrop does not work.
<li> The IBM JDK seems to return directory contents in a different
order than the Sun JDK.  Thus actor.lib.io.DirectoryListing
might return elements in a different order.
</menu>




<!--whatsnew-->
Contents:
<ul>
<li> <a href="#highlights">Highlights</a>
<li> <a href="#other">Other Key New Capabilities</a>
<li> <a href="#libraries">New and Enhanced Actor Libraries</a>
<li> <a href="#demos">New demonstrations</a>
<li> <a href="#features">Additional features</a>
<li> <a href="#bugs">Bug fixes</a>
</ul>

<h2> <a name="highlights">Highlights</a>
</h2>

<h3>Ptolemy II 6.0 Highlights</h3>

<ul>
<li> <a href="../ptolemy/codegen/README.html">Ptolemy II C Code Generation</a>
 <br>Primary Developers: Jackie Leung, Gang Zhou, Ye Zhou, Edward A. Lee,
	Christopher Brooks
 <br>  Ptolemy II can now generate C code for SDF, FSM and HDF models.
  This new code generator consists of actor templates (called helpers)
  that contain C code stubs that are stitched together.  Only a subset
  of actors have helpers, so only a subset of models can be converted
  to C.  Creating new helpers is fairly easy though.  The code generator
  has been written to be easily extensible to languages other than C.


<li> The
<a href="../ptolemy/domains/rendezvous/doc/body.htm" target="body">Rendezvous domain</a>:
 <br>Primary Authors: Thomas Huining Feng, Edward A. Lee
 <br>In the Rendezvous domain in Ptolemy II, each actor executes in
its own thread of control, and communication between actors is
by rendezvous.  If an actor is ready to send a message,
it blocks until the receiving actor is ready to receive it. Similarly if
an actor is ready to receive a message, it blocks until the sending actor
is ready to send it.
<p>
This domain supports both conditional and multi-way rendezvous.
In conditional rendezvous, an actor is willing to rendezvous with
any one of several other actors. In multiway rendezvous, an actor requires
rendezvous with multiple other actors at the same time.
When using conditional rendezvous, the choice of which rendezvous
occurs is nondeterministic, in general.
<P>
The model of computation is based on the Communicating Sequential
Processesmodel first proposed by Hoare in 1978. Rendezvous-based
communication is also known as synchronous message passing, but we
avoid this term to avoid confusion with the SR (synchronous/reactive)
domain.

<li> <a href="../ptolemy/configs/viptos/intro.htm">Viptos</a>: 
 <i>Visual editor and code generator for TinyOS programs</i>.
 <br>Primary Author: Elaine Cheong
 <br><B>Viptos</B> is an interface between TinyOS and Ptolemy II that
provides a graphical user interface for TinyOS developers.  

<li> <a href="codeDoc/ptolemy/distributed/domains/sdf/kernel/DistributedSDFDirector.html">Distributed SDF Domain using Jini</a>
 <br>Authors: Daniel Lazaro Cuadrado (Aalborg University).
 <br> The Distributed-SDF domain is an extended version of the existing SDF
 Domain that performs the simulation in a distributed manner using
 Jini.  
</ul>


<h2><a name="other">Other Key New Capabilities</a>
</h2>
<ul>
<li> <a href="codeDoc/ptolemy/actor/lib/hoc/CaseDirector.html">CaseDirector</a><a name="Case"></a>
 <br>Primary Author: Edward A. Lee
 <br>The Case actor has been further developed so that it is easier
to build models that execute one of several refinements.

<li> <a href="codeDoc/ptolemy/actor/lib/Publisher.html">Publisher</a>,
<a href="codeDoc/ptolemy/actor/lib/Subscriber.html">Subscriber</a> and
<a href="codeDoc/ptolemy/actor/lib/SubscriptionAggregator.html">SubscriptionAggregator</a>
 <br>Primary Authors: Raymond Cardillo, Edward A. Lee 
<br>These actors use publish/subscribe semantics to read
and write tokens on a named channel.  
 The tokens are
 "tunneled" to any instance of Subscriber that names the same channel
 and that is under the control of the same director. That is, it can
 be at a different level of the hierarchy, or in an entirely different
 composite actor, as long as the relevant composite actors are
 transparent (have no director).

<li> A Token can now be "nil", which means that the data is missing.
If <a href="codeDoc/ptolemy/data/Token.html#nil()">Token.nil()</a> is
called, it indicates that a token is a nil or missing token, which contains no data.
  Nil or missing tokens are common in analytical systems like R and SAS
  where they are used to handle sparsely populated data sources.
  In database parlance, missing tokens are sometimes called 
  null tokens.  Since null is a Java keyword, we use the term "nil".
The PN <a href="../ptolemy/domains/pn/demo/RemoveNilTokens/RemoveNilTokens.htm">Remove Nil Tokens</a>
demo illustrates use of nil tokens.
</ul>


<h2><a name="libraries">New and Enhanced Actor Libraries</a>
</h2>
A number of new and enhanced actor libraries are included in version 6.0.2.
You may also wish to refer to the
<a href="codeDoc/ptolemy/actor/lib/package-summary.html">ptolemy.actor.lib</a>
package, where most of the domain-polymorphic actors reside (domain-polymorphic actors are
those that can be used in more than one domain).

<ul>
</ul>

<li><i>New generic actors</i>:
<ul>
<li><a href="codeDoc/ptolemy/actor/lib/DelayStart.html">DelayStart</a>
<li><a href="codeDoc/ptolemy/actor/lib/RemoveNilTokens.html">RemoveNilTokens</a>
<li><a href="codeDoc/ptolemy/actor/lib/Triangular.html">Triangular</a>
</ul>

<li><i>New Communicating Sequential Processes (CSP) actors</i>:
<ul>
<li><a href="codeDoc/ptolemy/domains/csp/lib/Barrier.html">Barrier</a>
<li><a href="codeDoc/ptolemy/domains/csp/lib/Buffer.html">Buffer</a>
<li><a href="codeDoc/ptolemy/domains/csp/lib/ResourcePool.html">ResourcePool</a>
</ul>

<li><i>New Discrete Event (DE) actors</i>:
<ul>
<li><a href="codeDoc/ptolemy/domains/de/lib/UnionMerge.html">UnionMerge</a>
<li><a href="codeDoc/ptolemy/domains/de/lib/Wire.html">Wire</a>
</ul>

</ul>


<h2><a name="demos">New demonstrations</a></h2>
<ul>
<li><i>New Communicating Sequential Processes (CSP) demonstrations</i>:
<ul>
<li> <a href="../ptolemy/domains/csp/demo/Barrier/Barrier.htm">Barrier Synchronization</a>
<li> <a href="../ptolemy/domains/csp/demo/ResourcePool/ResourcePool.htm">Resource Management</a>
<li> <a href="../ptolemy/domains/csp/demo/WriteRegulator/WriteRegulator.htm">Write Regulator</a>
</ul>

<li><i>New Continuous Time (CT) demonstrations</i>:
<ul>
<li> <a href="../ptolemy/domains/ct/demo/CartPendulum/CartPendulum.htm">Cart with Pendulum</a> (Requires Java 3D, see the <a href="../ptolemy/domains/gr/doc/main.htm">GR domain</a>)
<li> <a href="../ptolemy/domains/ct/demo/NewtonsCradle/NewtonsCradlePerfectlyInelastic1.htm">Newton's Cradle with Perfectly Inelastic Collisions</a> (Requires Java 3D, see the <a href="../ptolemy/domains/gr/doc/main.htm">GR domain</a>)
<li> <a href="../ptolemy/domains/ct/demo/NewtonsCradle/ParameterizedNewtonsCradleAnimated.htm">Newton's Cradle with Configurable Parameters</a> (Requires Java 3D, see the <a href="../ptolemy/domains/gr/doc/main.htm">GR domain</a>)
<li> <a href="../ptolemy/domains/ct/demo/NewtonsCradle/ParameterizedNewtonsCradleAnimatedNondeterministic.htm">Newton's Cradle with Balls Having Different Masses</a> (Requires Java 3D, see the <a href="../ptolemy/domains/gr/doc/main.htm">GR domain</a>)
<li> <a href="../ptolemy/domains/ct/demo/Pendulum3D/Pendulum3D.htm">3D Pendulum</a> (Requires Java 3D, see the <a href="../ptolemy/domains/gr/doc/main.htm">GR domain</a>)
</ul>

<li><i>New Discrete Event (DE)demonstration</i>:
<ul>
<li><a href="../ptolemy/domains/de/demo/QueueAndServer/QueueAndServer.htm">Queue and Server (M/M/1 Queues)</a>
</ul>

<li><i>New Heterochronous Dataflow (HDF) demonstrations</i>:
<ul>
<li><a href="../ptolemy/domains/hdf/demo/AdaptiveCoding/AdaptiveCoding.htm">AdaptiveCoding</a> (With codegen in Ptolemy II 6.0)
<li><a href="../ptolemy/domains/hdf/demo/Hysteresis/Hysteresis.htm">Hysteresis</a> (With codegen in Ptolemy II 6.0)
<li><a href="../ptolemy/domains/hdf/demo/Merge/Merge.htm">Merge</a> (With codegen in Ptolemy II 6.0)
</ul>

<li><i>New Rendezvous demonstrations</i>:
<ul>
<li> <a href="../ptolemy/domains/rendezvous/demo/Barrier/Barrier.htm">Barrier Synchronization</a>
<li> <a href="../ptolemy/domains/rendezvous/demo/ResourcePool/ResourcePool.htm">Resource Management</a>
<li> <a href="../ptolemy/domains/rendezvous/demo/Sequencing/Sequencing.htm">Sequencing</a>
<li> <a href="../ptolemy/domains/rendezvous/demo/WriteRegulator/WriteRegulator.htm">Write Regulator</a>
</ul>

<li><i>New Synchronous Dataflow (SDF) demonstrations</i>:
<ul>
<li> <a href="../../actor/lib/hoc/demo/Case/Case.htm">Case</a> (New in Ptolemy II 6.0) (with codegen)
</ul>

<li><i>New Process Network (PN) demonstrations</i>:
<ul>
<li><a href="../ptolemy/domains/pn/demo/RemoveNilTokens/RemoveNilTokens.htm">Remove Nil Tokens</a>
</ul>


</ul>

<h2>
<a name="features"> Additional Features </a>
</h2>
<ul>
<li>Actor and model documentation system
 <br>Primary Authors: Edward A. Lee, Christopher Brooks.
 <br>Actor and model documentation is now displayed using a custom
 widget.  The documentation for an actor or model can be edited by 
 the user.  To view the documentation for an actor, right click on 
 the actor and select Documentation -&gt; Get Documentation.
 This functionality is implemented using
 <a
 href="codeDoc/ptolemy/vergil/actor/DocTableau.html">DocTableau</a>
 and other classes in vergil.actor and the
 <a href="codeDoc/doc/doclets/PtDoclet.html">PtDoclet</a> doclet.

<li> Relation Groups
Relations mediate connections between ports. For flexibility,
particularly with visual syntaxes, the Ptolemy II abstract syntax
permits any number of relations to be involved in any one
connection. Relations may be linked to
other relations. Any two relations that are linked are said to be
members of the same relation group. Specifically, a relation group is
a maximal set of linked relations. Semantically, a relation group has
the same meaning as a single relation.
The API of the Relation class, support linking and unlinking
relations, and also provides a method to obtain a list of all the
relations in a relation group.

<p>In a relation group, there is no significance to the order in which
relations are linked, unlike the order in which ports are linked to
relations. Also, unlike links between relations and ports, there is no
significance to multiple links between the same relations. Any two
relations are either linked or not linked.

<li>
<a href="codeDoc/ptolemy/actor/gui/CheckModelSize.html">CheckModelSize</a>:
<a href="about:copyright" target="_blank">about:copyright</a>
facility has been extended so that model screen size and screen
location are checked.


<li><a href="codeDoc/ptolemy/actor/gui/PtolemyPreferences.html">PtolemyPreferences</a>:
A preference system for UI related preferences, including:
  <ul>
     <li> preference to specify link bend radius
     <li> preference to specify relation size
     <li> preference to show parameters
  </ul>

<li><a href="codeDoc/ptolemy/actor/gui/WelcomeWindow.html">WelcomeWindow</a>,
<a href="codeDoc/ptolemy/actor/gui/WelcomeWindowTableau.html">WelcomeWindowTableau</a>:
An alternative start up screen infrastructure.

<li> <a href="codeDoc/ptolemy/actor/lib/hoc/MultiCompositeActor.html">MultiCompositeActor</a>,
 <a href="codeDoc/ptolemy/actor/lib/hoc/MultiCompositePort.html">MultiCompositePort</a>,
 <a href="codeDoc/ptolemy/actor/lib/hoc/Refinement.html">Refinement</a>,
 <a href="codeDoc/ptolemy/actor/lib/hoc/RefinementPort.html">RefinementPort</a>,
 <a href="codeDoc/ptolemy/domains/ct/kernel/CTCaseDirector.html">CTCaseDirector</a>,
 <a href="codeDoc/ptolemy/domains/ct/kernel/CTCase.html">CTCase</a>,
 <a href="codeDoc/ptolemy/domains/ct/kernel/CTRefinement.html">CTRefinement</a>,
 <a href="codeDoc/ptolemy/vergil/fsm/CaseGraphFrame.html">CaseGraphFrame</a>,
 <a href="codeDoc/ptolemy/vergil/fsm/CaseGraphTableau.html">CaseGraphTableau</a>,
<a href="codeDoc/ptolemy/domains/fsm/modal/Case.html">Case</a>:

 Used by the <a href="#Case">Case facility</a>.

<li><a href="codeDoc/ptolemy/actor/TokenSentEvent.html">TokenSentEvent</a>,
    <a href="codeDoc/ptolemy/actor/TokenSentListener.html">TokenSentListener</a>:
    Two listeners created by Oscar Barney to help with
    <a href="http://kepler-project.org#in_browser">Kepler</a>.

<li><a href="codeDoc/ptolemy/caltrop/ddi/DataflowWithRates.html">DataflowWithRates</a>,
 <a href="codeDoc/ptolemy/caltrop/ddi/DDFFactory.html">DDFFactory</a>,
 <a href="codeDoc/ptolemy/caltrop/ddi/DDF.html">DDF</a>:
 Caltrop work by J&#246;rn W/ Janneck, and Steve Neuendorffer

<li><a href="codeDoc/ptolemy/data/expr/ASTPtUnionConstructNode.html">ASTPtUnionConstructNode</a>,
 <a href="codeDoc/ptolemy/data/type/UnionType.html">UnionType</a>,
 <a href="codeDoc/ptolemy/data/UnionToken.html">UnionToken</a>:
 Support for the Union type

<li>  <a href="codeDoc/ptolemy/math/Precision.html">Precision</a>:
   <ul>
      <li> Provide support for unsigned FixPoint values
      <li> Modify the way Precision is represented internally
    (sign, bits, exponent offset)
      <li> Provide 4 String representations of a given precision
    (including ability to parse and recognize the appropriate
     precision format)
    <br>"3.2" (integer.fraction)
    <br>"5/3" (length/integer)
    <br>"2:-2" (vhdl)
    <br>"5e-2" (length e exponent)
   </ul> 
   <a href="codeDoc/ptolemy/math/FixPoint.html">FixPoint</a>:
   <ul> 
     <li> Provide "lossless" arithmetic operators. These operators
    will generate FixPoint results that "grow" if overflow occurs.
     <li> Provide quantized versions of these operators. Quantization
    is a parameter for each operator.
  </ul>
  Fixpoint and Precision work by Mike Wirthlin (Brigham Young University)


<li><a href="codeDoc/ptolemy/domains/csp/kernel/AbstractBranchController.html">AbstractBranchController</a>,
 <a href="codeDoc/ptolemy/domains/csp/kernel/BranchActor.html">BranchActor</a>,
 <a href="codeDoc/ptolemy/domains/csp/kernel/MultiwayBranchController.html">MultiwayBranchController</a>:
 Support for CSP changes

<li><a href="codeDoc/ptolemy/domains/sdf/kernel/CachedSDFScheduler.html">CachedSDFScheduler</a>

<li><a href="codeDoc/ptolemy/moml/LibraryBuilder.html">LibraryBuilder</a>:
    Support for <a href="http://kepler-project.org#in_browser">Kepler</a>,
    added by Chad Berkeley.


<li>Haiyang Zheng just enriched the exception handling
capabilities in Ptolemy II...  Currently, if you create an actor
that implements the ExceptionHandler interface and put it into a model,
then any exception that occurs when the model is executes gets delegated
to that actor.  The first such actor is a test actor that can be used
to make regression tests that ensure that an exception is thrown.

<li><a href="codeDoc/ptolemy/util/ExecuteCommands.html">ExecuteCommands</a>,
  <a href="codeDoc/ptolemy/util/StreamExec.html">StreamExec</a>:
  Code that executes subprocesses

<li><a href="codeDoc/ptolemy/vergil/actor/DocEffigy.html">DocEffigy</a>,
 <a href="codeDoc/ptolemy/vergil/actor/DocManager.html">DocManager</a>,
 <a href="codeDoc/ptolemy/vergil/actor/DocTableau.html">DocTableau</a>,
 <a href="codeDoc/ptolemy/vergil/basic/CustomizeDocumentationAction.html">CustomizeDocumentationAction</a>,
 <a href="codeDoc/ptolemy/vergil/basic/DocAttribute.html">DocAttribute</a>,
 <a href="codeDoc/ptolemy/vergil/basic/DocViewerFactory.html">DocViewerFactory</a>,
 <a href="codeDoc/ptolemy/vergil/basic/GetDocumentationAction.html">GetDocumentationAction</a>,
 <a href="codeDoc/ptolemy/vergil/basic/RemoveCustomDocumentationAction.html">RemoveCustomDocumentationAction</a>,
 <a href="codeDoc/ptolemy/moml/filter/ActorIndex.html">ActorIndex</a>
 <a href="codeDoc/ptolemy/moml/filter/NamedObjClassesSeen.html">NamedObjClassesSeen</a>:
 Support for actor and model documentation 

<li><a href="codeDoc/ptolemy/vergil/actor/LinkManhattanConnector.html">LinkManhattanConnector</a>,
 <a href="codeDoc/ptolemy/vergil/actor/PortConnectSite.html">PortConnectSite</a>,
 <a href="codeDoc/ptolemy/vergil/actor/PortTerminal.html">PortTerminal</a>,
 <a href="codeDoc/ptolemy/vergil/icon/ActorNameIcon.html">ActorNameIcon</a>,
 <a href="codeDoc/ptolemy/vergil/icon/NameIcon.html">NameIcon</a>,
 <a href="codeDoc/ptolemy/vergil/kernel/attributes/VisibleAttribute.html">VisibleAttribute</a>,
 <a href="codeDoc/ptolemy/vergil/toolbox/RotateOrFlipPorts.html">RotateOrFlipPorts</a>:
  Vergil features such as controllable port orientation.
  
<li><a href="codeDoc/ptolemy/vergil/VergilInitializer.html">VergilInitializer</a>:
  A class that may be called during startup.

<li> New deadlock detection mechanism in process domains supporting
multi-threaded actors
<li> SDFDirector has a period parameter now, making it timed.
and a synchronizeToRealTime parameters.
<li> SDF scheduler runs faster
<li> Workspace has wait(object, timeout) method, and DE uses it (some deadlocks
   prevented when using synchronizeToRealTime).
<li> Miscellaneous user interface enhancements:
   <ul>
      <li> Decorative attributes properly go to background or foreground
      <li>Display name for parameters (need not match the name)
      <li>Multiport connections show ordering
      <li>Bus relations displayed better
      <li>Custom Icons can have a "dashArray" parameter, which  
          creates dashed lines
   </ul>


<li> <i>Java compatibility</i>:
<br>
Ptolemy II can be compiled under Java 1.5.0_06 and Java 1.4.2_07
Java 1.5.0_06 is preferred though.

<br>

<li>Support changing the order of attributes, ports, etc., and
support moving objects towards the foreground or background
in the user interface. This is particularly helpful when
editing icons, since the elements of the icon can now be sent
to the background or brought to the foreground by right clicking
and selecting the appropriate option.

<br>
</ul>


<h2>
<a name="bugs"> Bug fixes </a>
</h2>
<ul>

<li> Fixed memory leaks in MoMLParser
<li> Create hierarchy didn't work with classes
<li> Undo didn't always work with classes
<li> Couldn't drop a director (or anything containing a SharedParameter)
     into a class that already had an instance.
<li> Relation groups didn't always work with hierarchy.
<li> Paste of hierarchical models would mess up locations on the inside.

<li> The highlighting of classes and of inherited elements is now opaque.
They used to be translucent so that the highlights could compose even
though they overlapped.  However, if you print a model to EPS or PDF,
the presence of translucent elements forces the rendition to be
rasterized. This results is a major loss of quality...
<li> Paste of relations not properly offset.
</ul>

</ul>


<h2>Backward Compatibility</h2>


Most models developed under Ptolemy II 1.0.1,
2.0.1, 3.0.2, 4.0.1, 5.0.2  or HyVisual 2.2-beta, 3.0, 4.0.1, 5.0.1
should run under Ptolemy II 6.0.2

<p>The MoMLParser includes a list of backward
compatibility filters that make certain changes on models
when read, handling such issues as actors being moved or renamed
and parameter names being changed.
The filters themselves are defined in
<a href="codeDoc/ptolemy/moml/filter/package-summary.html">
ptolemy.moml.filter</a>.
If you have developed your own actors under earlier versions of Ptolemy II by
writing your own Java files, you should recompile all your java code with
the new release.  In theory, copying the .class files should work, but
recompiling is safer.

<!--/whatsnew-->

<h2>Features that were new in previous Ptolemy II releases </h2>

<a href="oldFeatures.htm">Features that were new in previous Ptolemy II releases </a>


<!--vergilDocs-->
<h2><a name="limitations">Limitations</a>
</h2>
<ul>
<li><a href="http://ptolemy.eecs.berkeley.edu/ptolemy/ptII6.0/limitations.htm#in_browser">Ptolemy II 6.0.2 Limitations Page</a> - Limitations found after release.
<li><a
href="http://chess.eecs.berkeley.edu/ptexternal/bugs.html">Ptolemy II Bugzilla</a>
</ul>
Version 6.0.2 has the following limitations:

<h3>Release Limitations</h3>
<ul>

<li> The gzipped tar file of Ptolemy II  source files with Unix line endings
(<code>ptII6.0.2.src.tar.gz</code>)
 <B>requires</B> GNU tar or WinZip.  Solaris 2.5.1 tar will fail to
untar this file with a checksum error because the pathnames are longer
than 100 characters.
 <p>Note further that some of the .class names are longer than
31 characters, which may cause problems when downloading zip files
on the Macintosh and using Stuffit.

<li> The documentation for custom actors used in demonstrations is not
included in the release.  The source code for the custom actors can be found
in the source download.

<li> If a URL ends with <CODE>#in_browser</CODE>, then
Ptolemy II will invoke the User's web browser.  Unfortunately, this
does not always work, especially under Windows if Netscape is already
running.  The workaround is to exit Netscape and let Ptolemy II
start up Netscape for you.


<li> Web Start does not work very well if the pathname to the 
<CODE>vergil.jnlp</CODE> file has spaces in it.  The workaround is
to place your Ptolemy II tree in a directory that does not have spaces
in the path name if you plan on using Web Start.

<li> If your user library contains actors that are not present in
vergil, then you may see a dialog or dialogs asking if you want
to skip these elements.  This could happen if you had developed custom
actors and put them into your user library and these custom actors
are not present in the release.  The work around is to click 'Skip Element'
and continue with the start up.


<li> Applet issues:
	<ul>

	<li> We've experienced problems with the browser freezing
	when between applets.  What happens is that the previous
	applet gets a InterruptedException and pops up a modal dialog
	box, which freezed the browser.  We are working on a solution.

	<li> Applets do not correctly display the TextAttribute,
	DocumentationAttribute or the TM "Show schedule" icon.

	<li> The Ptolemy II Applets require java 1.4.1_02 or later so
	as to prevent problems with Windows XP and Radeon displays
	that causes XP to hang when a Java application is exiting.
	For details, see

<a href="http://developer.java.sun.com/developer/bugParade/bugs/4713003.html#in_browser" target="_top"><CODE>http://developer.java.sun.com/developer/bugParade/bugs/4713003.html</CODE></a>
	 <br>For non-applet situations, we can invoke the browser with
	<CODE>-Dsun.java2d.d3d=false</CODE> or 
	<CODE>-Dsun.java2d.noddraw=true</CODE>, but for applets we must
	require Java 1.4.1_02 or later.  
	 <br>As a result, the applet html code requires version 1.4.2 or later,

	<li>Applets seem to run out of memory after about 82Mb.

	<li>There are no Jython or Cal applets 

	<li> Opera has problems viewing applets that are on the local
	file system.  In particular, it seems to have problems with urls like
	<CODE>file:///d|/ptII/ptolemy/plot/demo/FourierSeries.htm</CODE>
	which work fine in Netscape 4.x, IE, Mozilla.

	 <p>However, if I use the following style of URL, then some of the applets
	work: 
<CODE>file://localhost/d:/ptII/ptolemy/plot/demo/FourierSeries.htm</CODE>.
	Unfortunately any applet that accesses a data file will
	not work with the above URL style because the data file will
	be outside the codebase.

	 <p> The solution is to install a web server on the local
	machine and view the applets using 
	<CODE>http://localhost/</CODE>
	
        <li> Opera 6.03/Windows 2000/Java 1.4.0, may have
        problems running applets that include diva.jar if diva.jar
	is not downloaded in the first applet.  To reproduce this problem:
	<ol>
	<li> Run <a href="../ptolemy/domains/sdf/demo/Butterfly/Butterfly.htm">SDF Butterfly</a>, which does not use diva.jar

	<li> <a href="../ptolemy/domains/sdf/demo/Expression/Expression.htm">SDF Expression</a>, which uses diva.jar

	<li> In Opera, do <CODE>Window</CODE> -&gt; <CODE>Special</CODE>
	-&gt; <CODE>Java Console</CODE>, and you will see the following
        stack trace
<pre>
java.lang.NoClassDefFoundError: diva/graph/GraphController	
at java.lang.Class.getDeclaredConstructors0(Native Method)  
at java.lang.Class.privateGetDeclaredConstructors(Class.java:1576) 
at java.lang.Class.getConstructor0(Class.java:1748) 
at java.lang.Class.newInstance0(Class.java:266)  
at java.lang.Class.newInstance(Class.java:249) 
at opera.PluginPanel.run(opera/PluginPanel.java:343) 
at java.lang.Thread.run(Thread.java:536)  
</pre>

	</ol>
	The problem only occurs under Opera.

	<li> Running the Networked demo via an applet on the local
	file system results in an AccessControlException.
<pre>
com.microstar.htm.htmException: XML element "entity" triggers exception:
  java.lang.Exception: Attempted to lookup 'Waveform', but got: 
  java.lang.ClassNotFoundException: Waveform
Attempted to find as a moml class, but got: 
             java.security.AccessControlException: access denied
             (java.net.SocketPermission ptolemy.eecs.berkeley.edu resolve)
	     in file:/C:/Program Files/Ptolemy/Ptolemy II 3.0 beta2/
                   ptolemy/moml/demo/Networked/ at line 62 and column 118
	at ptolemy.moml.MoMLParser.startElement(MoMLParser.java:1341)
	at com.microstar.htm.htmParser.parseElement(XmlParser.java:944)
	at com.microstar.htm.htmParser.parseContent(XmlParser.java:1117)
	at com.microstar.htm.htmParser.parseElement(XmlParser.java:946)
	at com.microstar.htm.htmParser.parseDocument(XmlParser.java:495)
	at com.microstar.htm.htmParser.doParse(XmlParser.java:175)
	at com.microstar.htm.htmParser.parse(XmlParser.java:145)
	at ptolemy.moml.MoMLParser.parse(MoMLParser.java:492)
	at ptolemy.moml.MoMLParser.parse(MoMLParser.java:471)
	at ptolemy.moml.MoMLParser.parse(MoMLParser.java:456)
	at ptolemy.actor.gui.MoMLApplet._createModel(MoMLApplet.java:188)
</pre>

	The Network demo does not work as a local applet because the xml file
	includes a reference to http://ptolemy.eecs.berkeley.edu, which is
	not on the local file system, so we get a SecurityException.
	 <br>The workaround is to run the applet by downloading it
	from the Ptolemy Website:
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII6.0/ptII/ptolemy/moml/demo/Networked/Networked.htm"><CODE>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII6.0/ptII/ptolemy/moml/demo/Networked/Networked.htm</CODE></a>


	<li> If an icon file is not present, then a Vergil applet might
	try to download the icon file multiple times.  Ptolemy II
	uses XML files to store icons.  For example
<a href="../ptolemy/actor/lib/BooleanSwitchIcon.xml"><CODE>$PTII/ptolemy/actor/lib/BooleanSwitchIcon.xml</CODE></a>
	is an icon for
<a href="../ptolemy/actor/lib/BooleanSwitch.java"><CODE>$PTII/ptolemy/actor/lib/BooleanSwitch.java</CODE></a>
	 <br>The problem is that if an actor does not have an icon file,
	then the applet may go back to the server multiple times looking
	for the icon. 
 <!-- Steve writes:
      I think the MoMLParser should load Java-defined classes the same way
      it does xml-defined classes.  It should reflect a prototype and then
      keep the prototype around and clone it...  This would mean that it
      only has to grab the icon once...
 -->

	</ul>

<li> Windows Installer Issues:
 	<ul>

	<li> Sometimes running a model that uses the Matlab interface
	will cause Ptolemy II to exit.  Usually this occurs if Vergil
	has been running for a while and then the Matlab interface is loaded.
	<br><b>Workaround #1</b>: Run a model that uses the Matlab interface
	as the first model by doing Quick Tour -&gt; Matlab CT.
	<br><b>Workaround #2</b>:
        We believe that the problem has to do with loading the Direct
	Draw library.
<a href="http://developer.java.sun.com/developer/bugParade/bugs/4838939.html#in_browser" target="_top"><code>http://developer.java.sun.com/developer/bugParade/bugs/4838939.html</code></a>
        suggests invoking java with <code>-Dsun.java2d.noddraw=true</code>.
	<br>The way to do this is to edit <code>vergil-full.<b>lax</b></code>
	and add the line
	<pre>
lax.nl.java.option.additional=-Dsun.java2d.noddraw=true	
</pre>
        which we went ahead and did.  Note that because of problems
	with Radeon displays, setting noddraw to true is not such
	a bad idea.  See above for details.
        <br>The way to check if this argument is being used is to
	hold down the Control key and double click on the
	<code>vergil-full.<b>exe</b></code> icon.
	<br>You should see something like:
	<pre>	
c:\j2sdk1.4.2\bin\java.exe -Dsun.java2d.noddraw=true com.zerog.lax.LAX C:\\Ptol
emy\\Ptolemy_II_6.0ptiny\\vergil-ptiny.lax C:\\DOCUME~1\\cxh\\LOCALS~1\\Temp
\\env.prop
executing java...
        </pre>
	Note that to debug the binary, you would use the following line:
        <pre>
lax.nl.java.option.additional=-Xdebug -Xrunjdwp:transport=dt_shmem,server=y,suspend=n 
        </pre>

	<li> The Windows installer works best if you are in the 
	Administrators Windows group.   Otherwise, the Windows installer
	tends to dump lots of icons on your desktop
	</ul>

<li> Web Start issues:
	<ul>

	<li> The Matlab Wireless demo fails under Web Start.
	The problem is that the Matlab .m file cannot be found.

	<li> The Python Ptolemizer demo does not work under Web Start,
	probably because Jython cannot handle loading classes
	from the Ptolemy II classes. 


        <li> The JAI Adaptive Median model does not work under
	Web Start - the repaired image might be corrupt.
	The reason is that it uses the JAI acceleration libraries,
	which Web Start does not load.  

	<li> Viewing a pdf file may bring up a blank window along with
	the pdf file.  Running the code generator may bring up
	a blank window while the java or javac processes are running.

	<li> Some of the links on the GR domain instructions page
	might not work under Web Start because the files they refer
	to are not present. 
        </ul>

<li> Limitations in demonstrations
        <ul>

	<li> CT CarTracking should be run using View-&gt;Run
	so that the user can change the fault parameter.

        <li> HTVQ demo: The displays do not go away when
	the demo is exited.

	<li> GR demos: Under Java 3D 1.3.1-beta, the ViewScreen
	actor may display a black image when a second GR demo is run.
	 <br>The workaround is to install Java 3D 1.2.1_04.

        <li> Bouncer demo: If the user drags the bouncing icon, it no
	longer bounces
        </ul>
</ul>
<h3>Limitations in the Class Mechanism</h3>
The class mechanism is highly preliminary and is likely to change
in future releases.  There are several known problems:

<ul>


<li> Several higher-order-components will not work inside class definitions.
    (ModalModel, several CT actors, etc.).


<li> Name collisions can occur when adding objects to base classes
    whose names collide with objects in derived classes.
    Auto naming should look through the derivedList for name conflicts.


<li> Propagation of changes to a base class is very slow in Vergil.
    If there are more than just a very few instances or derived
    classes, interactive editing is not practical.  As a workaround,
    put the class definitions in a separate file and edit them
    without opening the model that creates instances. The probable
    reason is that MoMLParser handles propagation by issuing large
    numbers of change requests.


<li> Certain actors, such as MathFunction, change the number of ports
    when parameters change.  This violates the derivation invariance
    for classes.  To demonstrate the bug, put a MathFunction actor
    in a base class that has a subclass.  Change the function parameter
    in the subclass to anything but "modulo".  Then change the function
    in the base class to "modulo" (which adds a port).  Now attempt
    to insert a parameter into the port.  You will get an
    InternalErrorException when it tries to propagate the change.
</ul>


<h3>Limitations in the Actor Libraries</h3>
<ul>
<li>The actor library is far from complete.

<li>The Expression actor does not properly propagate type constraints in
an expression-dependent fashion. It works correctly for double-valued
expressions of double-valued inputs.

<li> The Ptolemy parameter parser uses comma "," to separate elements
in an array.  This causes problems when Ptolemy is run on
European machines that use a comma "1,0" instead of a period "1.1"
in floating point numbers.

<li> The Display actor uses the Swing JTextArea component which is 
known to have memory leaks.

<li> The readFile() parameter function does not work with applets.
Instead, use readResource().
<!-- If you change the next paragraph update install.htm -->

<li>The Matlab interface works only under Windows and it requires that
Matlab be installed on the local machine. 
The Matlab interface should work with version of Matlab from
R11 (5.3) and up to and including R13 (6.5)
<p>Didier Mauuary reports that under Windows 98, configure failed
to set up the <code>MATLAB_DIR</code>, <code>PTCC</code>
and <code>PTDLLTOOL</code> makefile variables, but after
he set them by hand:
<pre>
 MATLAB_DIR = /cygdrive/c/MATLABR11
 PTCC = gcc
 PTDLLTOOL = dlltool
</pre>
he was able to get farther with the recompilation of the Matlab interface.

<li>Under Windows, the Matlab interface has problems at runtime with gcc-3.3.
<br>Under Windows, we recommend using gcc-3.2, or Microsoft Visual C.

<li>Under Windows, Matlab models sometimes cause Ptolemy to exit the
second time the model is run!
<br>The problem seems to be a segfault within a Windows library.
The problem only affects systems where Matlab is compiled with 
Microsoft Visual C.


<li> The actor.lib.comm.SerialComm actor requires that Javacomm is installed

<a href="http://java.sun.com/products/javacomm/index.html#in_browser" target="_top"><CODE>http://java.sun.com/products/javacomm/index.html</CODE></a>.
The SerialComm actor will only work under Windows.


<li> IterateOverArray has the following problems
     <menu>

	<li> IterateOverArray: When you drop in an actor, and then
	another actor, and then select "undo," the second actor is
	deleted without the first one being re-created. Thus, undo is
        only a partial undo. The fix to this is extremely
        complicated. Probably the only viable
        mechanism is to use UndoStackAttribute.getUndoInfo() to get the undo
        stack and then to manipulate the contents of that stack directly.
	
	<li> IterateOverArray: There should be an option to reset
	between firings of the inside actor.


	<li> IterateOverArray: If you drop a new actor onto an IterateOverArray
        in a subclass, it will simply acquire the new contents, but not
        actually do anything with them. It should somehow refuse to accept
        the new object in the subclass, since to do so, it would have to
        delete the original object defined in the base class, and this would
        violate the derived invariant.

        
	<li> IterateOverArray: If an instance of IterateOverArray in a derived
        class has overridden values of parameters, those are lost if
        contained entity of the instance in the base class is replaced and
        then an undo is requested.

       
        <li> IterateOverArray: When an actor with a display icon like
        Const, Expression, or MathFunction is put into
        IterateOverArray, the CopyCatIcon doesn't reflect the text display.

     </menu>

</ul>

<h3>Limitations in the PN Domain</h3>
The PN domain documents that it locally handles mutations.  However, this
is currently not true in the implementation.  For the basic PN model, this
doesn't really matter, since mutations happen pretty much the same as they
would otherwise.  (i.e. they are non-deterministic in when they execute) 
However, for timed PN models, there is actually some expressiveness
lost, since timed PN models can locally execute mutations deterministically.

 <p>Embedding a PN typed composite actor inside a non-process top level
such as DE does not work.  In fact embedding a process domain inside
a non-process domain is likely to have problems.  Profess Lee wrote:
<BLOCKQUOTE>
    Yes, it looks as if the code is designed so that process domains
    (PN, CSP) can only be used within process domains.  I'm not sure
    to what extent this is a limitation of the process domains vs. a
    semantic problem.  What would PN mean within DE?  Since PN has
    no well-defined notion of a "firing", how would you assign time
    stamps to the outputs of a PN actor?  By default in DE, the time
    stamps of the outputs of an actor match those of the inputs that
    triggered the firing. There is no such notion in PN.
</BLOCKQUOTE>

<h3>Limitations in the User Interface</h3>

Below are some of the limitations of Vergil, the Ptolemy II Graphical
User Interface.

<ul>

<li> The labeling of ports gets messed up if you change cardinality.


<li> Cancelling a style change doesn't restore original
state.  There are FIXME's about this in actor.gui.style.StyleConfigurer.

<li> If there are multiple windows open for a model, say, the top
level vergil window and the tree view, or the top level window
and the inside look of a composite component, when the top
level window is closed, all other windows are closed, but the
user is not prompted to save any change to the model.

<li> When setting the type of a port, we should provide a combo
box that lists the common ports

<li> When creating a Modal Model, use Control-Right-Button to
drawn arcs between nodes.  One potential workaround would
be to have an information message in the status bar about this.

<li> You should not change the names of built in ports - The port
mechanism should disallow port name changes on ports that are
named in Java.  The UI could recognize this.  The UI should
not allow the user to remove built in Java defined ports.

<li> Manually setting of the types of actors like ArrayToSequence that
have constraints on their element types can cause problems.
<li> HTVQ demo is badly laid out when run under vergil.
<li>Weak support for multiports in the graph editor.
<li>It is difficult to control wire routing.
<li>Cannot have more than one vertex in a connection.
<li>No mechanism to set the width of a relation.
<li>The integrated web browser is not a full-featured browser.
<li>Debugger not yet integrated.
<li>It is difficult to add actors to the libraries.
<li>No dynamic class reloading.


<li> Plot windows don't resize when control panel is resized
 <br>If a model with plotters
is executed using the run button on the toolbar, and
then re-executed using the run control panel accessed through
the View menu, then resizing the run control panel does not
cause the plots to resize to fit.
<br>Workaround:
Close the model and re-open it, and then run first using the
run control panel.

<li>There is no mechanism in the UI to save a model as a class,
nor to save a submodel as a class.

<li>There is no mechanism in the UI to create a custom icon for
a library element and store it in the right place.

<li>If an actor uses a slider, then the actor tree navigator pane
incorrectly shows the slider as a subitem of the actor.

<li> It seems that if you close a model that has been modified,
  get prompted to save it, and select save, then the model
  is saved but not closed.  It should be closed too...

<li> When I select a large number of items from one model, and
  copy and paste them into a new one, they sometimes all get
  placed at the origin.  Strangely, if I then auto-place,
  and then undo, they get their original (correct) placement!


<li> Printing a model that contains transparent objects can result
in problems when printing to Encapsulated Postscript (EPS).

 <br>If a model has transparent objects, then when it is printed to
EPS, the resulting file is a bitmap instead of a Postscript
description of the graphics.  You can tell by the file size (several
Meg vs. several K) and by opening it in Illustrator, where in theory
you should be able to ungroup and select and edit individual
components.

 <br>The way Java prints EPS is that there is an implementation of
Graphics2D that literally translates each graphics2D call into a
Postscript snippet.  If Java detects any transparent colors or images,
then the literal translation of each element independently doesn't
work, so the printing code reverts to writing everything to an image
and then sending the image, encapsulated in Postscript to the printer.

 <br>Solution1: Use one of these pdf writing programs to generate
pdf-1.4 compliant pdf files, which have extensions to support
transparency that Postscript lacks, and then print them to eps, which
would use the distill implementation of the above algorithm.
Or alternatively, we could switch to using pdftex instead of 
latex-&gt;dvips-&gt;distill which should
embed pdf for figures directly at the expense of less robust latex support.
<a href="http://www.geocities.com/marcoschmidt.geo/java-libraries-pdf.html#in_browser" target="_top"><CODE>http://www.geocities.com/marcoschmidt.geo/java-libraries-pdf.html</CODE></a>

 <br>Solution 2: Use the undocumented flag
-Dsun.java2d.print.pipeline=pdl on the command line to force the
printing to use the postscript path, ignoring transparency.
Under Cygwin:
<pre>
export JAVAFLAGS=-Dsun.java2d.print.pipeline=pdl
vergil
</pre>
Then edit the file by hand in Illustrator to add the transparency back in.

</ul>

<h3>Limitations in JNI</h3>
<menu>
<li> The Interface to C actors using the Java Native Interface
	is not available via the Windows Installer (or Web Start).
	To use the JNI/Ptolemy II interface, you must download 
	Ptolemy II as source files and compile.


<li> The JNI user interface was removed between Ptolemy II 4.0
and Ptolemy II 6.0 because the UI stopped working.

</menu>


<h3>Code Generation Limitations</h3>
Code Generation limitations are covered on the
<a href="codegen.htm#limitations">Code Generation</a> page. 

<h3>Missing Domains</h3>
<ul>
<li>Boolean and integer dataflow.
</ul>
 <p>For limitations discovered after the release, see the
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII6.0/#in_browser">Ptolemy II 6.0 website</a>

<!--/vergilDocs-->
<p><font size="2" color="#cc0000">Last Updated: $Date: 2007/02/04 17:31:09 $</font>
 <!-- Leave a trailing p here so that there is a little space at the bottom -->
 <p>
</body>
</html>
