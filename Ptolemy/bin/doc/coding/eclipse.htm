<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <title>Setting up Ptolemy II and Eclipse</title>
<link href="../default.css" rel="stylesheet" type="text/css">
</head>
<body>
<h1>Setting up Ptolemy II and Eclipse</h1>
<p>
These instructions assume you are using Eclipse 3.1 under Windows.
Other ways of setting up and building Ptolemy II are described on the
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/install.htm">
Ptolemy II install page</a>. Contents of this page:
<menu>
<li><a href="#Installing">Install Eclipse</a>
<li><a href="#SettingUp">Set up Eclipse for Ptolemy II</a>
<li><a href="#UsingEclipse">Using Eclipse</a>
<li><a href="#Optional">Optional Extensions</a>
<li><a href="performance.htm#Eclipse">Profiling using TPTP</a>
<li><a href="#Troubleshooting">Troubleshooting</a>
</menu>

<h2><a name="Installing">Install Eclipse</a></h2>
<ol>
<li>
Download the latest version of Eclipse from
<a href="http://www.eclipse.org" target="_top">http://www.eclipse.org</a>.
<li>
Unzip the download file into an appropriate place (such as <CODE>C:\Program Files</CODE>).
<li>
Finish the installation by running <CODE>eclipse/eclipse.exe</CODE>.
<br>The first time this is run it will complete the installation process.
<br>After the first run, normal start-up will occur whenever it is started.
</ol>

<h2><a name="Preferences">Eclipse Preferences for Ptolemy II</a></h1>
<p>
The default configuration of Eclipse has some difficulties with Ptolemy II,
so a few changes are necessary.
<ol>
<li>
We will need to change the default memory size for Eclipse
because Ptolemy II is a big project.
In Windows, create a shortcut to eclipse.exe on your desktop.
Then right mouse click on the shortcut and select Properties and change
the target to increase the memory allocated by default. E.g.,
if you installed Eclipse in <CODE>C:\Program Files\eclipse</CODE>,
then the Target should read:
<pre>
   "C:\Program Files\eclipse\eclipse.exe" -vmargs -Xmx256M
</pre>
The maximum memory size will now be 256 megabytes when you restart
Eclipse.
<p>
<li>Eclipse requires some customization to build Ptolemy II
and to keep the Ptolemy II coding style.  In the steps below, we
outline changes to be made in the Eclipse Preferences window,
which is invoked via Window -&gt; Preferences.  For each of the
changes, hit "Apply".  When all the changes are done, hit
"OK", which will close the Eclipse Preferences Window.

<li>
By default, Eclipse rebuilds a project when any change is made
to a file.  This will result in thousands of errors when Ptolemy II
is first checked out, and during normal usage, can be annoying because
of the pauses it creates. We suggest disabling this feature as
follows:
<ol>
<li> While still in the preferences window (Window -&gt; Preferences).
<li> General -&gt; Workspace
<li> Deselect "Build automatically."
<li> Click Apply. 
</ol>
<p>
<li>

Ptolemy II source files are worked on by many people with different
editors.  Unfortunately, different text editors interpret tab
characters differently, so it is best to use spaces rather than tabs.
<br>Sadly, the Eclipse developers have chosen to use tabs
as spaces, so you must adjust the Eclipse Java Formatter
if you plan on contributing code to the Ptolemy II tree.

<br>Also, it is best if files end with new line characters, so
that we can run line oriented scripts on them.
<br>In addition, we currently do not want the Eclipse Formatter
to format comments.  We hope to change this policy in the future.

<br>We handle these changes together:
 <ol>
  <li> While still in the preferences window (Window -&gt; Preferences).

  <li> Expand the Java tree, select "Code Style" -&gt; "Formatter"
  <li> Under "Select a profile" select "Java Conventions" and then 
       Click on "Show".  We use Java Conventions over the "Eclipse"
       setting because the Eclipse style uses tabs
  <li> Under the "Indentation" tab, in Eclipse 3.2 and later, change
       the Tab policy to "Spaces only".  In Eclipse 3.1.2 and earlier,
       verify that the Tab policy is "Spaces only".
  <li> Under the "New Lines" tab, select "at end of file"
  <li> Under the "Comments" tab, <b>unselect</b> "Enable comment formatting"
  <li> Click OK.

  <li> You will be prompted to save the style with a new name, we
suggest "Ptolemy II", but you can select any name. 
  <li> Click Apply
 </ol>

<li>
Ptolemy II uses some features of Java 5.0.
In particular, <CODE>ptolemy/actor/ptalon</CODE> uses generics,
which require Java 5.0
Set Eclipse to use Java 5.0 source code compliance.
<ol>
 <li> While still in the preferences window (Window -&gt; Preferences).
 <li> Expand the Java tree, select "Compiler" -&gt; "JDK Compliance:"
 <li> Set "Compiler compliance level" to "5.0".
 <li> Click Apply. 
</ol>

<li> Eclipse has very good compiler error/warning.  One of the
warnings complains if a Serializable class does not have
serialVersionUID declared.  Since this warning is only useful
if you are tightly managing serialization, we turn it off:
 <ol>
  <li> While still in the preferences window (Window -&gt; Preferences).
  <li> Expand the Java tree, select "Compiler" -&gt; "Errors/Warning"
  <li> Under "Potential programming problems", change
  "Serializable class without serialVersionUID" to "Ignore"
  <li> Click Apply.  If you are prompted for a full rebuild, click OK.
 </ol>

<li> By default, Eclipse checks in <CODE>makefile</CODE>s,
<CODE>*.c</CODE>, <CODE>*.h</CODE> files and <CODE>*.tcl</CODE> files with
<CODE>-kb</CODE>.  This causes no end of problems when the tree is
checked out on a platform that has a different line ending.

 <br>The solution: set your file associations properly:
 <ol>
  <li> While still in the preferences window (Window -&gt; Preferences).
  <li> Expand Team-&gt;File Content
  <li> Click on "Add Extension" and enter "*.tcl" in the "Enter
  File Extension" window, then click "OK" in the "Enter File Extension"  
  
  <li> Select "*.tcl" in the "File Content" window and then hit
	the "Change" button to change the Content to "ASCII Text"

  <li> Do the same steps for the "*.c" and "*.h" files.

  <li> Click on "Add Name" and add "makefile", select
	"makefile" and click on the "Change" button to
	change the Content to "ASCII Text"
  <li> Click Apply
 </ol>
<li> Click OK to apply all of the above changes.
</menu>

</ol>

<h2><a name="SettingUp">Setting up Eclipse to manage your Ptolemy II development environment</a></h2>

Eclipse will manage your ptII code tree as a <em>project</em> called
the ptII project.  There are three ways to set up the ptII project,
<ol>
<li> Eclipse is unaware of the CVS aspects of the project.
(No Eclipse CVS, use shell CVS)
<li> Eclipse is aware of the CVS aspects of the project, but
you can't use the shell version of CVS.  (Eclipse only CVS)
<li> Eclipse is aware of the CVS aspects of the project
and you can use the shell version of CVS.
(Use both Eclipse and shell CVS)
</ol>

Without CVS, you'll need to manage the CVS aspects in the usual way,
i.e. with CVS commands being submitted to a bash shell.  With CVS,
Eclipse will do all sorts of things to "help" you. Most of these
things are good, but there is a learning curve.  Setting
up for using both Eclipse and the shell CVS commands
is a little tricky, but worth it.

<p>
Once the ptII project has been set up there seems to be no easy way to
switch between using CVS and not using CVS.  I.E., the only way to
switch is to re-create the ptII project.  (Actually, this isn't too
hard after you've done it a couple of times :-)).  Therefore, you'll
need to decide if you want Eclipse to be aware of, and manage the CVS
aspects of the ptII project.

<h3><a name="NoCVS">If you <em>don't</em> want to use CVS with Eclipse</a></h3>
You must already have a ptII development tree. All you want to do is
<ol>
<li>Configure the .classpath and .project files. See <a href="#.classpath.default"><CODE>.classpath.default</CODE></a>. below.
<li>Create the ptII project
<ul>
 <li> File-&gt;New-&gt;Project. Select 'Java project'. Name it ptII.
Deselect 'Use default' and browse to the PTII directory. Finish.
<li>When asked if you want to shift to the Java perspective, click on Yes.
</ul>
</ol>

<h3>Check Out Ptolemy II from the CVS Repository using pserver</h3>
Below we describe how to set up Eclipse so Eclipse
manages the CVS interaction.  This is
easier than <a href="#BothEclipseAndShellCVS">setting up both Eclipse and Shell CVS</a> 
below.

<p>
Eclipse will manage your ptII code tree as a <em>project</em> called
the ptII project.  Assuming Eclipse is running:
<ol>
<li> Set up the pserver CVS connection:

<ol>
<li> Expose the CVS repositories view by selecting
     Window-&gt;Show View-&gt;Other in the menus.
     Then select CVS->CVS Repositories.
<li> In the CVS Repositories Panel, right mouse click
     and select New-&gt;Repository Location:

 <br>&nbsp;&nbsp;&nbsp;Host: <CODE>source.eecs.berkeley.edu</CODE>
 <br>&nbsp;&nbsp;&nbsp;Repository path: <CODE>/home/cvs/cvsanon</CODE>
 <br>&nbsp;&nbsp;&nbsp;The user name is: <CODE>anon</CODE> 
 with no password (leave the password field blank)
 <br> Or, if you have an individual read/write
CVS account on source, you can use your source user name 
and password. 
and use
 <br>&nbsp;&nbsp;&nbsp;Repository path: <CODE>/home/cvs</CODE>

<li> Select <CODE>pserver</CODE>.
 <p><B>Note:</B> Most users will select <CODE>pserver</CODE> because
they will be accessing the tree with <B>read-only</B> CVS access.
 <p>If you have an individual <B>read/write</B> CVS account on source,
then select <CODE>extssh</CODE>.  See the
<a href="http://chess.eecs.berkeley.edu/ptexternal">Ptexternal page</a>
for details.

<li> Click Finish.
</ol>

<p>
<li> <a name="CVSDSL">If you are connecting via a DSL connection</a>, you may
want to use compression to transfer files:
In Window -&gt; Preferences -&gt; Team -&gt; CVS -&gt; Connection tab, change Compression Level
to 9. 
<p>
<li> In the CVS Repositories View window, click + sign to the left of the repository and then on the + sign to the left of HEAD until you see the <CODE>ptII</CODE> Head.

<p>
<li> Right mouse click on the <CODE>ptII</CODE> Head,
then Select the "Check Out As..." option.  Follow the wizard,
creating selections as follows:
<ul>
<li> Check out as a project configured using the New Project Wizard
<li> Java project
<li> Name of the project: <CODE>ptII</CODE>
<li> We recommend that you select "Create project at external location:"
     and specify a directory you will find easily, such as
     <CODE>C:\ptII</CODE>, rather than the default, which is within the
     Eclipse workspace directory. 
<li> Click Finish.
</ul>

<p>
<li> Wait for the checkout to finish. Go get coffee. 
 <br><B>Note:</B>If you did not disable build automatically, as
suggested above, then Eclipse will build the project and produce
<B>thousands of errors</B>. This is not really a problem.  You will
fix the errors below with the <CODE>.classpath.default</CODE> file.

<p>
<li> You will want to view the project in the Java perspective.
If you aren't already in the Java perspective, select
Window-&gt;Open Perspective-&gt;Java in the menu.
By default, Eclipse offers a "package explorer" as the main navigation
mechanism for the source files. I much prefer to use the "navigator."
To get the navigator, select
Window-&gt;Show View-&gt;Navigator in the menu.
You can now browse the source files.

<p>
<li> <a name=".classpath.default">Find</a>
the file in the ptII home directory called
<CODE>.classpath.default</CODE> and copy it into a new file called
<CODE>.classpath</CODE>.
 <br>Note that you can use the Eclipse Navigator browse to the
<CODE>.classpath.default</CODE> file, open the file, copy the contents,
open <CODE>.classpath</CODE>, paste the contents and save.
 <br>Or, you can use Windows Explorer or the shell.

<li> In Eclipse, perform a Refresh on the ptII project
by Window-&gt;Open Perspective-&gt;Java,
<br> &nbsp;&nbsp;&nbsp;Go to the Package Explorer or the Navigator.
<br> &nbsp;&nbsp;&nbsp;Right mouse click on the ptII icon and select Refresh.

 <br><B>Note:</B>If you do not do copy <CODE>.classpath.default</CODE>
and select "Refresh", then Eclipse will produce
<B>thousands of errors</B>. This is not really a problem. It reflects
that you probably don't have installed many optional packages that
are needed to build subsets of Ptolemy II. You can ignore the errors
(not advised, since they will mask errors you make), or you can copy
the <CODE>.classpath.default</CODE> file and rebuild.
Alternatively, you can <a href="#Optional">install
the optional packages and run configure</a>.

<p>
<li> Build Ptolemy II by selecting Project -&gt; Build All.
(<I>If Build All is greyed out, then perhaps "Build Automatically" was
not disabled and Ptolemy has been built.  See above for more about Build Automatically</I>.)
You will get many warnings that you can ignore, but hopefully no errors.

</ol>

<h2><a name="UsingEclipse">Using Eclipse</a></h2>

<h3><a name="runningPtolemy">Running Ptolemy II</a></h3>

<ol>
 <li> In the Run menu, select "Run...".

<p> <li> In the resulting dialog, select "Java Application" and click "New".

<p> <li> In the dialog, fill in the boxes as follows:
<ul>
<li> Name: <CODE>Vergil</CODE>
<li> Project: <CODE>ptII</CODE>
<li> Main class: <CODE>ptolemy.vergil.VergilApplication</CODE>
</ul>

 <p> <li> Press the Run button.
</ol>

The Ptolemy II welcome window should appear.
 <p>You may now wish to read the <a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/design/usingVergil/index.htm">Using Vergil</a>
tutorial.

<h2><a name="simpleDebug">Simple Debugging Session</a></h2>

<ol>
 <li> Locate ptolemy/vergil/VergilApplication in the Explorer and
double click. Place a breakpoint on the first line of main()
by using Run- &gt; Add/Remove Breakpoint

 <li> Tell Eclipse which class to run with Run -&gt; Run. On the Main
tab, select the Ptolemy II package and enter
ptolemy.vergil.VergilApplication as Main class.

 <li> Press the Run button
 <li> To debug, quit Vergil, and place a breakpoint in, say, the fire() method
of ptolemy.domains.ct.kernel.CTBaseIntegrator. Then Run-&gt;Debug, and
as above. Open the Lorenz CT demo from the Quick Tour and run it.
 </ol>

<h2><a name="BothEclipseAndShellCVS">Setting up both Eclipse and Shell CVS</a> </h2>

The description below is based on information from Kevin Rutland about
how to set up you tree to use both Eclipse and shell CVS.

 <p><I>This method expects that you have a ssh account on source.eecs.</I>

 <p>See the Eclipse documentation:
<a href="http://help.eclipse.org/help31/index.jsp?topic=/org.eclipse.platform.doc.user/tasks/task-team-cmdlineclient.htm">Running the CVS command-line client outside of Eclipse</a>
<ol>
<li> Expose the CVS repositories view by selecting
     Window-&gt;Show View-&gt;Other in the menus.
     Then select CVS->CVS Repositories.
<li> In the CVS Repositories Panel, right mouse click
     and select New-&gt;Repository Location:

 <br>&nbsp;&nbsp;&nbsp;Host: <CODE>source.eecs.berkeley.edu</CODE>
 <br>&nbsp;&nbsp;&nbsp;Repository path: <CODE>/home/cvs</CODE>
 <br>&nbsp;&nbsp;&nbsp;The user name is: <i>Your source.eecs account name</i>
 <br>&nbsp;&nbsp;&nbsp;The password is: <i>Your source.eecs account password</i>
<li> Select <CODE>ext</CODE>.

<li> Click Finish.
<li> Follow the <a href="#CVSDSL">DSL and CVS Repository selection instructions above</a>.
</ol>

Note that on the command line you need to do
<pre>
export CVS_RSH=ssh
</pre>
All the 
Repository entries are set to ":ext:" in the project so all the normal 
cvs commands (like -n update and diff) work just as expected.


<h2><a name="Optional">Optional Extensions</a></h2>
<p>
Ptolemy II includes a number of packages that rely on software that you may
or may not have installed, such as MATLAB, the Java comm package (for serial
port connections), joystick support, Java Advanced Imaging (JAI), the Java
Media Framework (JMF), and Java 3D.  If you wish to use or extend these
features, you will need to perform a few extra steps.  These steps
require execution of a script called "configure" in the Ptolemy II
home directory, which in turn requires (on Windows) installation of
Cygwin, a package that offers Unix-like facilities within Windows.
You can find instructions for installing Cygwin at
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/cygwin.htm">
http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/cygwin.htm</a>.
<p>
The procedure below will modify the .classpath file that is
provided in the CVS repository to customize it for
the software that you have installed.
The procedure is as follows:
<ol>
<li> Start up Cygwin bash shell.

<li> Set the PTII variable and export it
<pre>
PTII=c:/ptII
export PTII
</pre>

<li>
cd to the PTII directory
<pre>
cd $PTII
</pre>
<li>Run configure:
<pre>
./configure
</pre>
This will create <code>$PTII/.classpath</code>

<li>
If you plan on running the Ptolemy II startup scripts in 
<CODE>$PTII/bin</CODE> on the command line, you will probably
want to run the following commands within Cygwin bash:
<pre>
cd $PTII/bin
make
</pre>

<li> In Eclipse, perform a Refresh on the ptII project
by Window-&gt;Open Perspective-&gt;Java,
<br> &nbsp;&nbsp;&nbsp;Go to the Package Explorer or the Navigator.
<br> &nbsp;&nbsp;&nbsp;Right mouse click on the ptII icon and select Refresh.
<br> This will
cause Eclipse to see the new <code>ptII/.classpath</code> and to build
the project (or you may have to manually rebuild if you turned
off automatic rebuild).
</ol>  


<h2><a name="UsingCVS">Using CVS</a></h2>
Resources:
<ul>
<li><a href="http://dev.eclipse.org/viewcvs/index.cgi/~checkout~/platform-vcm-home/docs/online/cvs_features2.0/cvs-faq.html#misc_3" target="_top">The Eclipse 2.0 CVS FAQ</a> 

<li><a href="http://www.gigascale.org/softdevel/faq/1/" target="_top">GSRC CVS FAQ</a></a>
</ul>

<h3>Debugging CVS</h3>
<a href="http://dev.eclipse.org/viewcvs/index.cgi/~checkout~/platform-vcm-home/docs/online/cvs_features2.0/cvs-faq.html#misc_0"
<code>http://dev.eclipse.org/viewcvs/index.cgi/~checkout~/platform-vcm-home/docs/online/cvs_features2.0/cvs-faq.html#misc_0</code> </a>
has instructions about how to enable debugging for cvs.
<ol>
<li>In your eclipse directory, create a <code>.options</code> file:
<pre>
org.eclipse.team.cvs.core/debug=true
org.eclipse.team.cvs.core/cvsprotocol=true
</pre>
<li>Start up eclipse
<pre>
./eclipse  -vm c:/j2sdk1.4.2_03/jre/bin/java.exe -debug -consolelog
</pre>
Note that it is important that you run the jre version of java and not javaw.
</ol>

<h3>Synchronizing with the repository</h3>

<ol>
<li>In the Navigator view scroll/open until you see the resource
(directory or file) to be synchronized.
<li>Right click that resource and select Team->Synchronize With Repository...
<li>The Synchronize view should then be visible.
<li>Select the Incoming, Outgoing, or Incoming/Outgoing menu bar icon as appropriate
</ol>

<h3>Restoring a file from the repository</h3>
<ol>
<li>In the Navigator view scroll/open until you see the resource (directory or file) to be restored.
<li>Right click that resource and select Replace With->Latest From Head.
</ol>

<h2>  <a name="#debugTclTests">Debugging Tcl Tests</a></h2>
<ol>
<li> Go to Windows -&gt; Open Perspective -&gt; Java.

<li> In Package Explorer, locate ptjacl.jar -&gt; tcl.lang -&gt;
Shell.class -&gt;  Shell and highlight it.

<li> Go to Run -&gt; Debug...

<li> Select Arguments tag.

<li> In Program arguments, put alljtests.tcl or any individual test tcl file. 
 <br>(E.g. SimpleDelay.tcl)

<li> In VM arguments, put <CODE>-Dptolemy.ptII.dir=<I>your PtII directory</I></CODE>
 <br>(E.g. <CODE>-Dptolemy.ptII.dir=c:\hyzheng\ptII</CODE>)


<li> Select Local directory, browse to the directory containing the tcl 
tests.
 <br> (E.g. <CODE>C:\hyzheng\ptII\ptolemy\domains\de\lib\test</CODE>)

<li> Select Debug.

</ol>

The nice thing of using Eclipse is that you can very easily locate where 
the exception is thrown by clicking the classes listed in the stack trace. 
You may further register a breakpoint to do more diagnosis.


<h2><a name="Troubleshooting">Troubleshooting</a></h2>

<h3>Preferences</h3>
If you have already used Eclipse and you would like to start over with
new projects and preferences, remove the <code>workspace</code> directory in the
Eclipse directory.  The <code>workspace</code> directory will only
appear if you have already run Eclipse.  <b>Note that removing the
<code>workspace</code> directory will cause Eclipse to 'forget'
about any projects that you may have set up</b>


<h3><a name="cvsConsole">CVS Console</h3>
You might find the cvs console to be of use, to use it do
Window -&gt; Show View -&gt; Other -&gt; CVS -&gt; CVS Console.


<h3><a name="cvsCompression">Problems with CVS compression</h3>

If, under Eclipse 2.1, you receive a message "Terminated with fatal
signal 10", then try using a different compression level, see the

<a href="http://dev.eclipse.org/viewcvs/index.cgi/~checkout~/platform-vcm-home/docs/online/cvs_features2.0/cvs-faq.html#misc_3" target="_top">The Eclipse CVS FAQ</a>
for details.
<br><a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=15724" target="_top"><code>https://bugs.eclipse.org/bugs/show_bug.cgi?id=15724</code></a> suggests using
a compression level of 5.

<p>After the failure, the cvs log (Window -&gt; Show Views -&gt; CVS -&gt; CVS Console says:

<pre>
  U ptII/ptolemy/domains/fsm/demo/ABP/img/Receiver.vsd
  U ptII/ptolemy/domains/fsm/demo/ABP/img/Sender.gif
  Terminated with fatal signal 11
The server reported an error while performing the "cvs checkout" command. (took 15:16.607)
Error: : Terminated with fatal signal 11
***
</pre>

<h3>Rebuilding Briefly flashes a window</h3> 
<p>If you have problems where clicking on build briefly flashes up
a window, look in <code>$PTII/.classpath</code> for and empty
exclusion that looks like <code>||</code>

<p>If you have problems with the classpath, look in the 
<code>workspace/.metadata/log</code> file that is in
the directory where eclipse is installed. For more information
about the <code>.metadata</code> directory, see
<a href="#metadata">below</a>.

<h3>Ignore files</h3>
To ignore files from within CVS:
Windows -&gt; Preferences -&gt; Team -&gt; -&gt; Ignored Resources
 <br>Add the following to Ignore Patterns
<menu>
<li> alljsimpletests.tcl
<li> alljtests.tcl
</menu>

<h3>Eclipse takes a long time to start up</h3>

If Eclipse takes a long time to start up, then the problem could be that

 <p>Basically, when eclipse starts up, it might try to update
<a name="metadata"><CODE>H:/workspace/.metadata</CODE></a>
.  The solution is covered in
<a href="http://www.eclipse.org/documentation/html/plugins/org.eclipse.platform.doc.user/doc/tasks/running_eclipse.htm" target="_top"><CODE>http://www.eclipse.org/documentation/html/plugins/org.eclipse.platform.doc.user/doc/tasks/running_eclipse.htm</CODE></a>:



The way I figured this out was by running Norton Antivirus and
doing View -&gt; File System Realtime Scan Statistics and then I noticed 
that my machine was updating H:/workspace/.metadata

 <p>I think I introduced the problem by clicking on the Eclipse.exe
binary and selecting Pin to Start Menu.  My solution was to remove the
Eclipse bogus entry in the start menu and then create a shortcut,
change Start in property and then pin that shortcut to my start menu.


<h3>Running Eclipse under JDK1.4 on an IBM T30</h3>
If you are running on an IBM T30 laptop with JDK1.4, and
your machine locks up upon exiting an application, then
you may
need to invoke java with the <CODE>-Dsun.java2d.d3d=false</CODE> 
argument.

The way to do this is to do
<CODE>Run</CODE> 0&gt; <CODE>Debug ...</CODE> -&gt; <CODE>Arguments</CODE>
and then add <CODE>-Dsun.java2d.d3d=false</CODE>  to the
<CODE>VM arguments</CODE> text area.

</body>
</html>
